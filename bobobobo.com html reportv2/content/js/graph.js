/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 119.0, "minX": 0.0, "maxY": 83764.0, "series": [{"data": [[0.0, 119.0], [0.1, 136.0], [0.2, 154.0], [0.3, 163.0], [0.4, 177.0], [0.5, 187.0], [0.6, 216.0], [0.7, 229.0], [0.8, 244.0], [0.9, 259.0], [1.0, 274.0], [1.1, 283.0], [1.2, 296.0], [1.3, 319.0], [1.4, 339.0], [1.5, 358.0], [1.6, 374.0], [1.7, 386.0], [1.8, 404.0], [1.9, 424.0], [2.0, 440.0], [2.1, 455.0], [2.2, 464.0], [2.3, 474.0], [2.4, 483.0], [2.5, 498.0], [2.6, 508.0], [2.7, 523.0], [2.8, 548.0], [2.9, 568.0], [3.0, 591.0], [3.1, 609.0], [3.2, 620.0], [3.3, 630.0], [3.4, 647.0], [3.5, 670.0], [3.6, 686.0], [3.7, 697.0], [3.8, 704.0], [3.9, 714.0], [4.0, 721.0], [4.1, 736.0], [4.2, 748.0], [4.3, 758.0], [4.4, 764.0], [4.5, 772.0], [4.6, 787.0], [4.7, 800.0], [4.8, 810.0], [4.9, 818.0], [5.0, 828.0], [5.1, 837.0], [5.2, 844.0], [5.3, 851.0], [5.4, 862.0], [5.5, 867.0], [5.6, 876.0], [5.7, 879.0], [5.8, 886.0], [5.9, 895.0], [6.0, 904.0], [6.1, 912.0], [6.2, 918.0], [6.3, 925.0], [6.4, 933.0], [6.5, 939.0], [6.6, 945.0], [6.7, 957.0], [6.8, 967.0], [6.9, 973.0], [7.0, 976.0], [7.1, 981.0], [7.2, 990.0], [7.3, 994.0], [7.4, 998.0], [7.5, 1006.0], [7.6, 1011.0], [7.7, 1020.0], [7.8, 1027.0], [7.9, 1031.0], [8.0, 1039.0], [8.1, 1047.0], [8.2, 1053.0], [8.3, 1059.0], [8.4, 1063.0], [8.5, 1073.0], [8.6, 1078.0], [8.7, 1080.0], [8.8, 1083.0], [8.9, 1088.0], [9.0, 1090.0], [9.1, 1096.0], [9.2, 1100.0], [9.3, 1107.0], [9.4, 1109.0], [9.5, 1115.0], [9.6, 1118.0], [9.7, 1125.0], [9.8, 1134.0], [9.9, 1138.0], [10.0, 1145.0], [10.1, 1150.0], [10.2, 1156.0], [10.3, 1160.0], [10.4, 1164.0], [10.5, 1167.0], [10.6, 1172.0], [10.7, 1178.0], [10.8, 1187.0], [10.9, 1195.0], [11.0, 1203.0], [11.1, 1207.0], [11.2, 1212.0], [11.3, 1216.0], [11.4, 1224.0], [11.5, 1226.0], [11.6, 1232.0], [11.7, 1238.0], [11.8, 1246.0], [11.9, 1251.0], [12.0, 1257.0], [12.1, 1261.0], [12.2, 1268.0], [12.3, 1272.0], [12.4, 1275.0], [12.5, 1282.0], [12.6, 1287.0], [12.7, 1293.0], [12.8, 1297.0], [12.9, 1302.0], [13.0, 1307.0], [13.1, 1312.0], [13.2, 1316.0], [13.3, 1321.0], [13.4, 1326.0], [13.5, 1330.0], [13.6, 1334.0], [13.7, 1338.0], [13.8, 1343.0], [13.9, 1347.0], [14.0, 1351.0], [14.1, 1355.0], [14.2, 1358.0], [14.3, 1362.0], [14.4, 1369.0], [14.5, 1372.0], [14.6, 1375.0], [14.7, 1380.0], [14.8, 1382.0], [14.9, 1387.0], [15.0, 1391.0], [15.1, 1396.0], [15.2, 1401.0], [15.3, 1406.0], [15.4, 1412.0], [15.5, 1415.0], [15.6, 1418.0], [15.7, 1426.0], [15.8, 1429.0], [15.9, 1432.0], [16.0, 1438.0], [16.1, 1441.0], [16.2, 1443.0], [16.3, 1446.0], [16.4, 1448.0], [16.5, 1452.0], [16.6, 1455.0], [16.7, 1462.0], [16.8, 1467.0], [16.9, 1471.0], [17.0, 1473.0], [17.1, 1475.0], [17.2, 1479.0], [17.3, 1484.0], [17.4, 1487.0], [17.5, 1492.0], [17.6, 1496.0], [17.7, 1499.0], [17.8, 1501.0], [17.9, 1504.0], [18.0, 1506.0], [18.1, 1510.0], [18.2, 1512.0], [18.3, 1515.0], [18.4, 1517.0], [18.5, 1520.0], [18.6, 1523.0], [18.7, 1526.0], [18.8, 1528.0], [18.9, 1530.0], [19.0, 1532.0], [19.1, 1535.0], [19.2, 1538.0], [19.3, 1542.0], [19.4, 1544.0], [19.5, 1547.0], [19.6, 1551.0], [19.7, 1554.0], [19.8, 1559.0], [19.9, 1560.0], [20.0, 1564.0], [20.1, 1566.0], [20.2, 1569.0], [20.3, 1571.0], [20.4, 1572.0], [20.5, 1576.0], [20.6, 1578.0], [20.7, 1581.0], [20.8, 1583.0], [20.9, 1585.0], [21.0, 1588.0], [21.1, 1590.0], [21.2, 1592.0], [21.3, 1596.0], [21.4, 1598.0], [21.5, 1601.0], [21.6, 1604.0], [21.7, 1607.0], [21.8, 1609.0], [21.9, 1611.0], [22.0, 1613.0], [22.1, 1615.0], [22.2, 1617.0], [22.3, 1619.0], [22.4, 1620.0], [22.5, 1623.0], [22.6, 1626.0], [22.7, 1628.0], [22.8, 1630.0], [22.9, 1632.0], [23.0, 1633.0], [23.1, 1635.0], [23.2, 1637.0], [23.3, 1639.0], [23.4, 1641.0], [23.5, 1642.0], [23.6, 1644.0], [23.7, 1646.0], [23.8, 1648.0], [23.9, 1650.0], [24.0, 1651.0], [24.1, 1654.0], [24.2, 1655.0], [24.3, 1658.0], [24.4, 1659.0], [24.5, 1661.0], [24.6, 1663.0], [24.7, 1666.0], [24.8, 1667.0], [24.9, 1669.0], [25.0, 1671.0], [25.1, 1673.0], [25.2, 1675.0], [25.3, 1677.0], [25.4, 1680.0], [25.5, 1681.0], [25.6, 1682.0], [25.7, 1684.0], [25.8, 1686.0], [25.9, 1688.0], [26.0, 1691.0], [26.1, 1692.0], [26.2, 1693.0], [26.3, 1695.0], [26.4, 1698.0], [26.5, 1700.0], [26.6, 1703.0], [26.7, 1706.0], [26.8, 1707.0], [26.9, 1708.0], [27.0, 1710.0], [27.1, 1711.0], [27.2, 1712.0], [27.3, 1714.0], [27.4, 1716.0], [27.5, 1718.0], [27.6, 1721.0], [27.7, 1724.0], [27.8, 1727.0], [27.9, 1729.0], [28.0, 1732.0], [28.1, 1735.0], [28.2, 1738.0], [28.3, 1740.0], [28.4, 1743.0], [28.5, 1745.0], [28.6, 1748.0], [28.7, 1749.0], [28.8, 1751.0], [28.9, 1752.0], [29.0, 1755.0], [29.1, 1757.0], [29.2, 1760.0], [29.3, 1762.0], [29.4, 1766.0], [29.5, 1769.0], [29.6, 1772.0], [29.7, 1773.0], [29.8, 1775.0], [29.9, 1779.0], [30.0, 1782.0], [30.1, 1784.0], [30.2, 1786.0], [30.3, 1789.0], [30.4, 1792.0], [30.5, 1792.0], [30.6, 1793.0], [30.7, 1796.0], [30.8, 1800.0], [30.9, 1802.0], [31.0, 1805.0], [31.1, 1807.0], [31.2, 1809.0], [31.3, 1811.0], [31.4, 1812.0], [31.5, 1815.0], [31.6, 1818.0], [31.7, 1822.0], [31.8, 1824.0], [31.9, 1825.0], [32.0, 1826.0], [32.1, 1830.0], [32.2, 1832.0], [32.3, 1834.0], [32.4, 1838.0], [32.5, 1843.0], [32.6, 1845.0], [32.7, 1848.0], [32.8, 1849.0], [32.9, 1851.0], [33.0, 1853.0], [33.1, 1854.0], [33.2, 1856.0], [33.3, 1858.0], [33.4, 1859.0], [33.5, 1862.0], [33.6, 1864.0], [33.7, 1865.0], [33.8, 1869.0], [33.9, 1871.0], [34.0, 1872.0], [34.1, 1874.0], [34.2, 1877.0], [34.3, 1878.0], [34.4, 1882.0], [34.5, 1883.0], [34.6, 1885.0], [34.7, 1887.0], [34.8, 1889.0], [34.9, 1891.0], [35.0, 1892.0], [35.1, 1894.0], [35.2, 1896.0], [35.3, 1897.0], [35.4, 1899.0], [35.5, 1901.0], [35.6, 1903.0], [35.7, 1906.0], [35.8, 1908.0], [35.9, 1910.0], [36.0, 1912.0], [36.1, 1915.0], [36.2, 1917.0], [36.3, 1919.0], [36.4, 1922.0], [36.5, 1925.0], [36.6, 1927.0], [36.7, 1930.0], [36.8, 1932.0], [36.9, 1935.0], [37.0, 1937.0], [37.1, 1938.0], [37.2, 1939.0], [37.3, 1941.0], [37.4, 1943.0], [37.5, 1945.0], [37.6, 1947.0], [37.7, 1949.0], [37.8, 1951.0], [37.9, 1953.0], [38.0, 1954.0], [38.1, 1956.0], [38.2, 1957.0], [38.3, 1959.0], [38.4, 1961.0], [38.5, 1963.0], [38.6, 1965.0], [38.7, 1968.0], [38.8, 1970.0], [38.9, 1972.0], [39.0, 1974.0], [39.1, 1975.0], [39.2, 1978.0], [39.3, 1979.0], [39.4, 1981.0], [39.5, 1984.0], [39.6, 1986.0], [39.7, 1988.0], [39.8, 1989.0], [39.9, 1990.0], [40.0, 1990.0], [40.1, 1993.0], [40.2, 1995.0], [40.3, 1997.0], [40.4, 1999.0], [40.5, 2000.0], [40.6, 2002.0], [40.7, 2004.0], [40.8, 2006.0], [40.9, 2008.0], [41.0, 2009.0], [41.1, 2011.0], [41.2, 2012.0], [41.3, 2014.0], [41.4, 2016.0], [41.5, 2018.0], [41.6, 2020.0], [41.7, 2022.0], [41.8, 2024.0], [41.9, 2027.0], [42.0, 2030.0], [42.1, 2032.0], [42.2, 2033.0], [42.3, 2035.0], [42.4, 2037.0], [42.5, 2040.0], [42.6, 2042.0], [42.7, 2044.0], [42.8, 2046.0], [42.9, 2048.0], [43.0, 2050.0], [43.1, 2053.0], [43.2, 2055.0], [43.3, 2056.0], [43.4, 2058.0], [43.5, 2061.0], [43.6, 2063.0], [43.7, 2065.0], [43.8, 2067.0], [43.9, 2069.0], [44.0, 2071.0], [44.1, 2073.0], [44.2, 2075.0], [44.3, 2077.0], [44.4, 2079.0], [44.5, 2081.0], [44.6, 2083.0], [44.7, 2084.0], [44.8, 2087.0], [44.9, 2090.0], [45.0, 2093.0], [45.1, 2094.0], [45.2, 2096.0], [45.3, 2098.0], [45.4, 2100.0], [45.5, 2100.0], [45.6, 2102.0], [45.7, 2103.0], [45.8, 2105.0], [45.9, 2108.0], [46.0, 2110.0], [46.1, 2112.0], [46.2, 2114.0], [46.3, 2116.0], [46.4, 2117.0], [46.5, 2119.0], [46.6, 2120.0], [46.7, 2122.0], [46.8, 2124.0], [46.9, 2126.0], [47.0, 2127.0], [47.1, 2130.0], [47.2, 2131.0], [47.3, 2134.0], [47.4, 2136.0], [47.5, 2138.0], [47.6, 2139.0], [47.7, 2141.0], [47.8, 2143.0], [47.9, 2144.0], [48.0, 2147.0], [48.1, 2150.0], [48.2, 2152.0], [48.3, 2153.0], [48.4, 2155.0], [48.5, 2157.0], [48.6, 2159.0], [48.7, 2160.0], [48.8, 2163.0], [48.9, 2164.0], [49.0, 2166.0], [49.1, 2167.0], [49.2, 2169.0], [49.3, 2172.0], [49.4, 2174.0], [49.5, 2176.0], [49.6, 2178.0], [49.7, 2179.0], [49.8, 2181.0], [49.9, 2183.0], [50.0, 2186.0], [50.1, 2189.0], [50.2, 2190.0], [50.3, 2191.0], [50.4, 2194.0], [50.5, 2196.0], [50.6, 2198.0], [50.7, 2199.0], [50.8, 2202.0], [50.9, 2204.0], [51.0, 2206.0], [51.1, 2207.0], [51.2, 2209.0], [51.3, 2212.0], [51.4, 2215.0], [51.5, 2218.0], [51.6, 2221.0], [51.7, 2223.0], [51.8, 2224.0], [51.9, 2226.0], [52.0, 2228.0], [52.1, 2229.0], [52.2, 2232.0], [52.3, 2233.0], [52.4, 2234.0], [52.5, 2236.0], [52.6, 2239.0], [52.7, 2241.0], [52.8, 2242.0], [52.9, 2244.0], [53.0, 2248.0], [53.1, 2250.0], [53.2, 2251.0], [53.3, 2254.0], [53.4, 2257.0], [53.5, 2259.0], [53.6, 2261.0], [53.7, 2262.0], [53.8, 2265.0], [53.9, 2267.0], [54.0, 2270.0], [54.1, 2271.0], [54.2, 2273.0], [54.3, 2275.0], [54.4, 2277.0], [54.5, 2280.0], [54.6, 2282.0], [54.7, 2283.0], [54.8, 2285.0], [54.9, 2288.0], [55.0, 2290.0], [55.1, 2293.0], [55.2, 2295.0], [55.3, 2298.0], [55.4, 2299.0], [55.5, 2300.0], [55.6, 2302.0], [55.7, 2304.0], [55.8, 2306.0], [55.9, 2308.0], [56.0, 2309.0], [56.1, 2310.0], [56.2, 2311.0], [56.3, 2314.0], [56.4, 2316.0], [56.5, 2319.0], [56.6, 2321.0], [56.7, 2322.0], [56.8, 2324.0], [56.9, 2327.0], [57.0, 2330.0], [57.1, 2333.0], [57.2, 2335.0], [57.3, 2337.0], [57.4, 2339.0], [57.5, 2341.0], [57.6, 2344.0], [57.7, 2347.0], [57.8, 2350.0], [57.9, 2351.0], [58.0, 2353.0], [58.1, 2357.0], [58.2, 2360.0], [58.3, 2362.0], [58.4, 2364.0], [58.5, 2366.0], [58.6, 2367.0], [58.7, 2370.0], [58.8, 2371.0], [58.9, 2374.0], [59.0, 2375.0], [59.1, 2378.0], [59.2, 2380.0], [59.3, 2383.0], [59.4, 2384.0], [59.5, 2387.0], [59.6, 2389.0], [59.7, 2392.0], [59.8, 2394.0], [59.9, 2398.0], [60.0, 2400.0], [60.1, 2402.0], [60.2, 2405.0], [60.3, 2407.0], [60.4, 2409.0], [60.5, 2412.0], [60.6, 2413.0], [60.7, 2416.0], [60.8, 2418.0], [60.9, 2420.0], [61.0, 2423.0], [61.1, 2426.0], [61.2, 2427.0], [61.3, 2429.0], [61.4, 2430.0], [61.5, 2433.0], [61.6, 2436.0], [61.7, 2438.0], [61.8, 2440.0], [61.9, 2443.0], [62.0, 2445.0], [62.1, 2447.0], [62.2, 2450.0], [62.3, 2455.0], [62.4, 2457.0], [62.5, 2460.0], [62.6, 2461.0], [62.7, 2463.0], [62.8, 2467.0], [62.9, 2470.0], [63.0, 2471.0], [63.1, 2474.0], [63.2, 2476.0], [63.3, 2477.0], [63.4, 2480.0], [63.5, 2483.0], [63.6, 2485.0], [63.7, 2488.0], [63.8, 2490.0], [63.9, 2493.0], [64.0, 2496.0], [64.1, 2497.0], [64.2, 2499.0], [64.3, 2501.0], [64.4, 2503.0], [64.5, 2505.0], [64.6, 2507.0], [64.7, 2509.0], [64.8, 2511.0], [64.9, 2513.0], [65.0, 2516.0], [65.1, 2518.0], [65.2, 2521.0], [65.3, 2523.0], [65.4, 2526.0], [65.5, 2528.0], [65.6, 2529.0], [65.7, 2532.0], [65.8, 2534.0], [65.9, 2537.0], [66.0, 2540.0], [66.1, 2542.0], [66.2, 2545.0], [66.3, 2548.0], [66.4, 2552.0], [66.5, 2555.0], [66.6, 2558.0], [66.7, 2561.0], [66.8, 2564.0], [66.9, 2566.0], [67.0, 2569.0], [67.1, 2573.0], [67.2, 2575.0], [67.3, 2579.0], [67.4, 2580.0], [67.5, 2582.0], [67.6, 2585.0], [67.7, 2588.0], [67.8, 2591.0], [67.9, 2595.0], [68.0, 2599.0], [68.1, 2603.0], [68.2, 2605.0], [68.3, 2608.0], [68.4, 2611.0], [68.5, 2614.0], [68.6, 2618.0], [68.7, 2620.0], [68.8, 2624.0], [68.9, 2627.0], [69.0, 2631.0], [69.1, 2633.0], [69.2, 2635.0], [69.3, 2637.0], [69.4, 2639.0], [69.5, 2641.0], [69.6, 2643.0], [69.7, 2647.0], [69.8, 2650.0], [69.9, 2654.0], [70.0, 2658.0], [70.1, 2661.0], [70.2, 2664.0], [70.3, 2666.0], [70.4, 2669.0], [70.5, 2673.0], [70.6, 2676.0], [70.7, 2678.0], [70.8, 2681.0], [70.9, 2683.0], [71.0, 2687.0], [71.1, 2689.0], [71.2, 2692.0], [71.3, 2695.0], [71.4, 2698.0], [71.5, 2702.0], [71.6, 2706.0], [71.7, 2711.0], [71.8, 2713.0], [71.9, 2716.0], [72.0, 2718.0], [72.1, 2723.0], [72.2, 2728.0], [72.3, 2732.0], [72.4, 2736.0], [72.5, 2739.0], [72.6, 2742.0], [72.7, 2746.0], [72.8, 2749.0], [72.9, 2752.0], [73.0, 2755.0], [73.1, 2758.0], [73.2, 2763.0], [73.3, 2766.0], [73.4, 2771.0], [73.5, 2774.0], [73.6, 2778.0], [73.7, 2782.0], [73.8, 2785.0], [73.9, 2788.0], [74.0, 2791.0], [74.1, 2794.0], [74.2, 2796.0], [74.3, 2799.0], [74.4, 2802.0], [74.5, 2805.0], [74.6, 2808.0], [74.7, 2810.0], [74.8, 2815.0], [74.9, 2819.0], [75.0, 2822.0], [75.1, 2824.0], [75.2, 2830.0], [75.3, 2832.0], [75.4, 2836.0], [75.5, 2840.0], [75.6, 2843.0], [75.7, 2847.0], [75.8, 2850.0], [75.9, 2854.0], [76.0, 2857.0], [76.1, 2861.0], [76.2, 2862.0], [76.3, 2865.0], [76.4, 2867.0], [76.5, 2870.0], [76.6, 2876.0], [76.7, 2880.0], [76.8, 2884.0], [76.9, 2888.0], [77.0, 2892.0], [77.1, 2895.0], [77.2, 2900.0], [77.3, 2905.0], [77.4, 2910.0], [77.5, 2914.0], [77.6, 2918.0], [77.7, 2923.0], [77.8, 2928.0], [77.9, 2932.0], [78.0, 2936.0], [78.1, 2940.0], [78.2, 2944.0], [78.3, 2947.0], [78.4, 2949.0], [78.5, 2952.0], [78.6, 2956.0], [78.7, 2959.0], [78.8, 2963.0], [78.9, 2969.0], [79.0, 2975.0], [79.1, 2978.0], [79.2, 2982.0], [79.3, 2986.0], [79.4, 2990.0], [79.5, 2994.0], [79.6, 3000.0], [79.7, 3003.0], [79.8, 3006.0], [79.9, 3008.0], [80.0, 3013.0], [80.1, 3015.0], [80.2, 3019.0], [80.3, 3025.0], [80.4, 3028.0], [80.5, 3032.0], [80.6, 3035.0], [80.7, 3038.0], [80.8, 3042.0], [80.9, 3048.0], [81.0, 3051.0], [81.1, 3054.0], [81.2, 3058.0], [81.3, 3062.0], [81.4, 3066.0], [81.5, 3069.0], [81.6, 3074.0], [81.7, 3077.0], [81.8, 3080.0], [81.9, 3085.0], [82.0, 3093.0], [82.1, 3098.0], [82.2, 3102.0], [82.3, 3105.0], [82.4, 3110.0], [82.5, 3117.0], [82.6, 3124.0], [82.7, 3129.0], [82.8, 3140.0], [82.9, 3143.0], [83.0, 3148.0], [83.1, 3154.0], [83.2, 3160.0], [83.3, 3165.0], [83.4, 3173.0], [83.5, 3179.0], [83.6, 3185.0], [83.7, 3192.0], [83.8, 3202.0], [83.9, 3208.0], [84.0, 3215.0], [84.1, 3222.0], [84.2, 3227.0], [84.3, 3229.0], [84.4, 3237.0], [84.5, 3244.0], [84.6, 3256.0], [84.7, 3264.0], [84.8, 3272.0], [84.9, 3278.0], [85.0, 3284.0], [85.1, 3289.0], [85.2, 3298.0], [85.3, 3306.0], [85.4, 3314.0], [85.5, 3318.0], [85.6, 3322.0], [85.7, 3326.0], [85.8, 3332.0], [85.9, 3340.0], [86.0, 3345.0], [86.1, 3355.0], [86.2, 3365.0], [86.3, 3376.0], [86.4, 3381.0], [86.5, 3390.0], [86.6, 3394.0], [86.7, 3403.0], [86.8, 3410.0], [86.9, 3418.0], [87.0, 3425.0], [87.1, 3428.0], [87.2, 3446.0], [87.3, 3454.0], [87.4, 3462.0], [87.5, 3473.0], [87.6, 3484.0], [87.7, 3503.0], [87.8, 3512.0], [87.9, 3522.0], [88.0, 3530.0], [88.1, 3537.0], [88.2, 3546.0], [88.3, 3558.0], [88.4, 3565.0], [88.5, 3573.0], [88.6, 3580.0], [88.7, 3592.0], [88.8, 3606.0], [88.9, 3615.0], [89.0, 3627.0], [89.1, 3644.0], [89.2, 3652.0], [89.3, 3659.0], [89.4, 3668.0], [89.5, 3684.0], [89.6, 3697.0], [89.7, 3703.0], [89.8, 3713.0], [89.9, 3720.0], [90.0, 3731.0], [90.1, 3739.0], [90.2, 3752.0], [90.3, 3763.0], [90.4, 3773.0], [90.5, 3782.0], [90.6, 3787.0], [90.7, 3798.0], [90.8, 3809.0], [90.9, 3819.0], [91.0, 3828.0], [91.1, 3836.0], [91.2, 3847.0], [91.3, 3853.0], [91.4, 3870.0], [91.5, 3886.0], [91.6, 3893.0], [91.7, 3903.0], [91.8, 3916.0], [91.9, 3930.0], [92.0, 3940.0], [92.1, 3954.0], [92.2, 3971.0], [92.3, 3982.0], [92.4, 3990.0], [92.5, 4005.0], [92.6, 4010.0], [92.7, 4028.0], [92.8, 4046.0], [92.9, 4066.0], [93.0, 4079.0], [93.1, 4083.0], [93.2, 4103.0], [93.3, 4120.0], [93.4, 4134.0], [93.5, 4143.0], [93.6, 4158.0], [93.7, 4178.0], [93.8, 4185.0], [93.9, 4205.0], [94.0, 4223.0], [94.1, 4251.0], [94.2, 4260.0], [94.3, 4291.0], [94.4, 4310.0], [94.5, 4333.0], [94.6, 4347.0], [94.7, 4367.0], [94.8, 4391.0], [94.9, 4407.0], [95.0, 4438.0], [95.1, 4460.0], [95.2, 4482.0], [95.3, 4510.0], [95.4, 4541.0], [95.5, 4579.0], [95.6, 4619.0], [95.7, 4647.0], [95.8, 4675.0], [95.9, 4728.0], [96.0, 4773.0], [96.1, 4808.0], [96.2, 4873.0], [96.3, 4912.0], [96.4, 4988.0], [96.5, 5087.0], [96.6, 5139.0], [96.7, 5206.0], [96.8, 5351.0], [96.9, 5521.0], [97.0, 5585.0], [97.1, 5671.0], [97.2, 5752.0], [97.3, 5867.0], [97.4, 5999.0], [97.5, 6151.0], [97.6, 6328.0], [97.7, 6487.0], [97.8, 6626.0], [97.9, 6916.0], [98.0, 7153.0], [98.1, 7554.0], [98.2, 7929.0], [98.3, 8302.0], [98.4, 8643.0], [98.5, 9074.0], [98.6, 9624.0], [98.7, 9912.0], [98.8, 10223.0], [98.9, 10986.0], [99.0, 11760.0], [99.1, 12163.0], [99.2, 12923.0], [99.3, 13626.0], [99.4, 15207.0], [99.5, 16741.0], [99.6, 18780.0], [99.7, 20551.0], [99.8, 23632.0], [99.9, 28432.0], [100.0, 83764.0]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 532.0, "series": [{"data": [[100.0, 55.0], [36100.0, 1.0], [37100.0, 1.0], [42500.0, 1.0], [200.0, 67.0], [51500.0, 1.0], [300.0, 57.0], [400.0, 73.0], [500.0, 51.0], [600.0, 71.0], [700.0, 96.0], [800.0, 127.0], [900.0, 145.0], [1000.0, 178.0], [1100.0, 175.0], [1200.0, 191.0], [1300.0, 230.0], [1400.0, 257.0], [1500.0, 373.0], [1600.0, 501.0], [1700.0, 432.0], [1800.0, 463.0], [1900.0, 505.0], [2000.0, 492.0], [2100.0, 532.0], [2200.0, 474.0], [2300.0, 455.0], [2400.0, 424.0], [2500.0, 377.0], [2600.0, 342.0], [2700.0, 287.0], [2800.0, 285.0], [2900.0, 242.0], [3000.0, 257.0], [3100.0, 164.0], [3300.0, 141.0], [3200.0, 146.0], [3400.0, 103.0], [3500.0, 105.0], [3700.0, 106.0], [3600.0, 92.0], [3800.0, 97.0], [3900.0, 76.0], [4000.0, 75.0], [4100.0, 68.0], [4200.0, 47.0], [4300.0, 51.0], [4500.0, 27.0], [4400.0, 40.0], [4600.0, 31.0], [4700.0, 23.0], [4800.0, 19.0], [5000.0, 11.0], [5100.0, 17.0], [4900.0, 16.0], [5200.0, 7.0], [5300.0, 6.0], [83700.0, 1.0], [5600.0, 11.0], [5400.0, 6.0], [5500.0, 15.0], [5700.0, 12.0], [5800.0, 4.0], [6000.0, 7.0], [5900.0, 10.0], [6100.0, 6.0], [6300.0, 4.0], [6200.0, 6.0], [6400.0, 7.0], [6500.0, 9.0], [6600.0, 6.0], [6900.0, 7.0], [6800.0, 2.0], [6700.0, 2.0], [7100.0, 3.0], [7000.0, 2.0], [7400.0, 2.0], [7300.0, 5.0], [7200.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7800.0, 3.0], [7700.0, 4.0], [7900.0, 5.0], [8000.0, 3.0], [8100.0, 2.0], [8700.0, 2.0], [8400.0, 3.0], [8600.0, 6.0], [8300.0, 2.0], [8200.0, 1.0], [8500.0, 1.0], [8800.0, 4.0], [9100.0, 3.0], [8900.0, 1.0], [9000.0, 2.0], [9200.0, 3.0], [9700.0, 3.0], [9400.0, 2.0], [9600.0, 1.0], [9300.0, 1.0], [10000.0, 2.0], [9800.0, 4.0], [10100.0, 4.0], [9900.0, 6.0], [10200.0, 1.0], [10700.0, 3.0], [10600.0, 2.0], [10500.0, 2.0], [10300.0, 1.0], [11000.0, 1.0], [10900.0, 2.0], [11200.0, 2.0], [10800.0, 1.0], [11100.0, 1.0], [11600.0, 1.0], [11700.0, 2.0], [11300.0, 1.0], [11400.0, 1.0], [12100.0, 6.0], [12200.0, 3.0], [12000.0, 1.0], [11800.0, 1.0], [11900.0, 3.0], [12600.0, 2.0], [12700.0, 3.0], [12900.0, 2.0], [13000.0, 3.0], [13100.0, 1.0], [13700.0, 1.0], [13600.0, 2.0], [13500.0, 3.0], [14200.0, 2.0], [13900.0, 1.0], [14500.0, 2.0], [14600.0, 1.0], [14400.0, 1.0], [15100.0, 1.0], [15200.0, 1.0], [15700.0, 1.0], [15500.0, 1.0], [16100.0, 1.0], [16000.0, 1.0], [16200.0, 1.0], [15900.0, 1.0], [16300.0, 1.0], [16700.0, 3.0], [16900.0, 2.0], [16600.0, 1.0], [18400.0, 2.0], [17500.0, 1.0], [18100.0, 1.0], [17900.0, 1.0], [18800.0, 1.0], [19200.0, 2.0], [18500.0, 1.0], [18700.0, 1.0], [19000.0, 1.0], [19600.0, 3.0], [20200.0, 1.0], [20000.0, 1.0], [20600.0, 1.0], [20700.0, 1.0], [21300.0, 1.0], [20500.0, 2.0], [21200.0, 1.0], [21600.0, 1.0], [23400.0, 1.0], [22800.0, 1.0], [23300.0, 1.0], [24300.0, 1.0], [24500.0, 1.0], [23600.0, 1.0], [24000.0, 1.0], [25600.0, 1.0], [26200.0, 1.0], [27200.0, 1.0], [27800.0, 1.0], [28200.0, 2.0], [28400.0, 1.0], [30700.0, 1.0], [29900.0, 1.0], [31400.0, 1.0], [32600.0, 1.0], [32800.0, 1.0]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 83700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 253.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8221.0, "series": [{"data": [[0.0, 253.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1526.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8221.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.820224719101124, "minX": 1.75328352E12, "maxY": 100.0, "series": [{"data": [[1.75328358E12, 100.0], [1.75328352E12, 92.29858525688749], [1.7532837E12, 97.95708955223854], [1.75328364E12, 100.0], [1.75328382E12, 4.820224719101124], [1.75328376E12, 61.84157966409448]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75328382E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 128.625, "minX": 1.0, "maxY": 3820.7534246575347, "series": [{"data": [[2.0, 139.125], [3.0, 169.33333333333334], [4.0, 184.82758620689654], [5.0, 225.14285714285714], [6.0, 223.5], [7.0, 231.0], [8.0, 245.43478260869563], [9.0, 275.6111111111111], [10.0, 315.18750000000006], [11.0, 336.42857142857144], [12.0, 368.7272727272727], [13.0, 398.75], [14.0, 391.91428571428577], [15.0, 503.9285714285714], [16.0, 548.5], [17.0, 519.2], [18.0, 626.6315789473684], [19.0, 658.6666666666666], [20.0, 934.1], [21.0, 767.2222222222222], [22.0, 1424.3333333333333], [23.0, 1034.0], [24.0, 722.0], [25.0, 506.75], [26.0, 830.75], [27.0, 875.0], [28.0, 775.5999999999999], [29.0, 824.7272727272726], [30.0, 797.4], [31.0, 908.5882352941177], [32.0, 941.1666666666667], [33.0, 954.8888888888889], [34.0, 919.1250000000001], [35.0, 1036.2], [36.0, 829.875], [37.0, 1083.6527777777776], [38.0, 924.25], [39.0, 1046.75], [40.0, 1157.166666666667], [41.0, 646.0], [42.0, 2028.15], [43.0, 1273.6875000000002], [45.0, 1265.4615384615386], [44.0, 1315.7499999999998], [46.0, 1292.9999999999998], [47.0, 1065.8666666666668], [48.0, 1351.6315789473683], [49.0, 1217.9375], [50.0, 1334.9245283018865], [51.0, 1696.4545454545453], [53.0, 1625.083333333333], [52.0, 1427.0], [54.0, 1429.0769230769229], [55.0, 1789.8857142857144], [56.0, 1280.0], [57.0, 1633.5], [58.0, 1149.0], [59.0, 1838.4285714285716], [60.0, 1581.6666666666667], [61.0, 1120.2], [62.0, 2673.5714285714284], [63.0, 1840.4545454545455], [65.0, 1601.457142857143], [66.0, 1727.7033898305085], [67.0, 2081.7714285714283], [64.0, 1626.84375], [68.0, 1737.9411764705887], [69.0, 3163.913043478261], [70.0, 1944.862745098039], [71.0, 1959.4736842105262], [74.0, 2652.625], [75.0, 1707.6590909090903], [73.0, 1722.7727272727268], [72.0, 2505.1694915254247], [76.0, 1669.642857142857], [78.0, 2463.5], [79.0, 1901.5652173913043], [77.0, 1699.111111111111], [80.0, 1788.8999999999999], [81.0, 3769.8846153846152], [82.0, 3820.7534246575347], [83.0, 2069.593749999999], [84.0, 2279.110294117647], [86.0, 2343.460000000002], [87.0, 2275.579207920792], [85.0, 2263.5454545454536], [88.0, 2218.2258064516122], [89.0, 2008.6666666666665], [90.0, 2253.1], [91.0, 2727.7241379310353], [92.0, 2287.168831168831], [93.0, 2674.962686567165], [94.0, 2513.215686274511], [95.0, 2516.833333333333], [96.0, 2304.0799999999995], [97.0, 2724.8361581920904], [98.0, 2555.617187499999], [99.0, 2472.4814814814818], [100.0, 2832.269447929743], [1.0, 128.625]], "isOverall": false, "label": "bobobobo.com", "isController": false}, {"data": [[89.27429999999954, 2520.7096000000042]], "isOverall": false, "label": "bobobobo.com-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 425.71666666666664, "minX": 1.75328352E12, "maxY": 1.1766625733333332E7, "series": [{"data": [[1.75328358E12, 1.0980685733333332E7], [1.75328352E12, 7169615.15], [1.7532837E12, 1.1451520033333333E7], [1.75328364E12, 1.1563661566666666E7], [1.75328382E12, 475366.75], [1.75328376E12, 1.1766625733333332E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75328358E12, 9834.533333333333], [1.75328352E12, 6424.016666666666], [1.7532837E12, 10255.466666666667], [1.75328364E12, 10355.916666666666], [1.75328382E12, 425.71666666666664], [1.75328376E12, 10537.683333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75328382E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 199.05617977528092, "minX": 1.75328352E12, "maxY": 2877.0107003891017, "series": [{"data": [[1.75328358E12, 2877.0107003891017], [1.75328352E12, 2550.1548771407324], [1.7532837E12, 2695.5018656716416], [1.75328364E12, 2815.3903002309426], [1.75328382E12, 199.05617977528092], [1.75328376E12, 1804.3177485247425]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75328382E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 95.77528089887639, "minX": 1.75328352E12, "maxY": 602.0578793774297, "series": [{"data": [[1.75328358E12, 602.0578793774297], [1.75328352E12, 580.2256142963516], [1.7532837E12, 537.9580223880598], [1.75328364E12, 538.7191685912252], [1.75328382E12, 95.77528089887639], [1.75328376E12, 381.07762142532994]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75328382E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75328352E12, "maxY": 54.315711094564506, "series": [{"data": [[1.75328358E12, 29.001945525291806], [1.75328352E12, 54.315711094564506], [1.7532837E12, 15.20569029850744], [1.75328364E12, 13.984757505773683], [1.75328382E12, 0.0], [1.75328376E12, 8.77893781207445]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75328382E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 119.0, "minX": 1.75328352E12, "maxY": 83764.0, "series": [{"data": [[1.75328358E12, 27850.0], [1.75328352E12, 24324.0], [1.7532837E12, 36131.0], [1.75328364E12, 42546.0], [1.75328382E12, 484.0], [1.75328376E12, 83764.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75328358E12, 386.0], [1.75328352E12, 288.0], [1.7532837E12, 475.0], [1.75328364E12, 717.0], [1.75328382E12, 119.0], [1.75328376E12, 148.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75328358E12, 4124.099999999999], [1.75328352E12, 3852.2000000000003], [1.7532837E12, 3893.5], [1.75328364E12, 3783.0], [1.75328382E12, 280.0], [1.75328376E12, 2464.6000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75328358E12, 12531.230000000061], [1.75328352E12, 12813.359999999982], [1.7532837E12, 11681.400000000089], [1.75328364E12, 11803.24000000002], [1.75328382E12, 484.0], [1.75328376E12, 11106.200000000033]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75328358E12, 2465.5], [1.75328352E12, 2143.0], [1.7532837E12, 2301.0], [1.75328364E12, 2443.0], [1.75328382E12, 184.0], [1.75328376E12, 1580.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75328358E12, 4874.199999999999], [1.75328352E12, 4814.4], [1.7532837E12, 4601.75], [1.75328364E12, 4321.099999999996], [1.75328382E12, 299.5], [1.75328376E12, 3030.199999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75328382E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 3.0, "maxY": 3415.0, "series": [{"data": [[3.0, 125.0], [5.0, 1733.0], [7.0, 3415.0], [8.0, 1631.0], [9.0, 2631.0], [10.0, 3041.5], [11.0, 631.5], [14.0, 2409.5], [15.0, 2200.5], [16.0, 2645.0], [17.0, 2514.0], [18.0, 2727.0], [19.0, 2147.5], [20.0, 2407.5], [21.0, 2621.0], [22.0, 2642.0], [23.0, 2597.0], [24.0, 2092.0], [25.0, 2171.0], [26.0, 2324.5], [27.0, 2320.0], [28.0, 2122.5], [29.0, 2124.0], [30.0, 2597.0], [31.0, 1956.0], [33.0, 1995.0], [32.0, 2224.0], [34.0, 1965.5], [35.0, 1790.0], [36.0, 1468.0], [37.0, 2212.0], [39.0, 2257.0], [38.0, 2433.0], [40.0, 2121.5], [41.0, 2241.5], [42.0, 2189.5], [43.0, 2202.0], [44.0, 2373.0], [45.0, 1605.0], [46.0, 1878.5], [47.0, 2119.0], [49.0, 2055.0], [48.0, 2400.5], [51.0, 2126.5], [50.0, 2373.0], [52.0, 2378.5], [53.0, 2347.5], [55.0, 2691.0], [54.0, 1694.0], [57.0, 3007.0], [56.0, 1663.5], [59.0, 2337.0], [58.0, 1710.0], [60.0, 2325.5], [65.0, 2232.0], [64.0, 2348.5], [68.0, 2246.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 85.0, "minX": 3.0, "maxY": 669.0, "series": [{"data": [[3.0, 85.0], [5.0, 584.0], [7.0, 441.0], [8.0, 482.0], [9.0, 359.0], [10.0, 459.5], [11.0, 138.0], [14.0, 615.5], [15.0, 498.5], [16.0, 505.5], [17.0, 393.0], [18.0, 567.5], [19.0, 480.5], [20.0, 355.0], [21.0, 571.0], [22.0, 466.5], [23.0, 540.0], [24.0, 386.5], [25.0, 373.0], [26.0, 584.0], [27.0, 485.0], [28.0, 529.0], [29.0, 411.0], [30.0, 558.0], [31.0, 415.0], [33.0, 367.0], [32.0, 536.0], [34.0, 362.5], [35.0, 353.0], [36.0, 323.5], [37.0, 427.0], [39.0, 393.0], [38.0, 391.5], [40.0, 408.5], [41.0, 417.0], [42.0, 501.5], [43.0, 375.5], [44.0, 511.5], [45.0, 304.0], [46.0, 342.5], [47.0, 447.0], [49.0, 386.5], [48.0, 494.0], [51.0, 399.0], [50.0, 419.5], [52.0, 504.0], [53.0, 367.0], [55.0, 534.0], [54.0, 246.5], [57.0, 627.5], [56.0, 560.0], [59.0, 335.5], [58.0, 316.0], [60.0, 381.0], [65.0, 383.0], [64.0, 584.0], [68.0, 669.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.35, "minX": 1.75328352E12, "maxY": 36.083333333333336, "series": [{"data": [[1.75328358E12, 34.266666666666666], [1.75328352E12, 24.05], [1.7532837E12, 35.583333333333336], [1.75328364E12, 36.083333333333336], [1.75328382E12, 1.35], [1.75328376E12, 35.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75328382E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.75328352E12, "maxY": 36.71666666666667, "series": [{"data": [[1.75328358E12, 34.266666666666666], [1.75328352E12, 22.383333333333333], [1.7532837E12, 35.733333333333334], [1.75328364E12, 36.083333333333336], [1.75328382E12, 1.4833333333333334], [1.75328376E12, 36.71666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75328382E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.75328352E12, "maxY": 36.71666666666667, "series": [{"data": [[1.75328358E12, 34.266666666666666], [1.75328352E12, 22.383333333333333], [1.7532837E12, 35.733333333333334], [1.75328364E12, 36.083333333333336], [1.75328382E12, 1.4833333333333334], [1.75328376E12, 36.71666666666667]], "isOverall": false, "label": "bobobobo.com-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75328382E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.75328352E12, "maxY": 36.71666666666667, "series": [{"data": [[1.75328358E12, 34.266666666666666], [1.75328352E12, 22.383333333333333], [1.7532837E12, 35.733333333333334], [1.75328364E12, 36.083333333333336], [1.75328382E12, 1.4833333333333334], [1.75328376E12, 36.71666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75328382E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

