/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "maxY": 259637.0, "series": [{"data": [[0.0, 106.0], [0.1, 125.0], [0.2, 132.0], [0.3, 145.0], [0.4, 191.0], [0.5, 225.0], [0.6, 252.0], [0.7, 314.0], [0.8, 362.0], [0.9, 435.0], [1.0, 493.0], [1.1, 517.0], [1.2, 551.0], [1.3, 577.0], [1.4, 608.0], [1.5, 636.0], [1.6, 664.0], [1.7, 694.0], [1.8, 713.0], [1.9, 734.0], [2.0, 767.0], [2.1, 786.0], [2.2, 809.0], [2.3, 819.0], [2.4, 841.0], [2.5, 860.0], [2.6, 883.0], [2.7, 905.0], [2.8, 920.0], [2.9, 942.0], [3.0, 958.0], [3.1, 981.0], [3.2, 994.0], [3.3, 1011.0], [3.4, 1030.0], [3.5, 1056.0], [3.6, 1071.0], [3.7, 1092.0], [3.8, 1121.0], [3.9, 1140.0], [4.0, 1163.0], [4.1, 1182.0], [4.2, 1203.0], [4.3, 1223.0], [4.4, 1230.0], [4.5, 1246.0], [4.6, 1263.0], [4.7, 1283.0], [4.8, 1298.0], [4.9, 1322.0], [5.0, 1346.0], [5.1, 1369.0], [5.2, 1391.0], [5.3, 1420.0], [5.4, 1434.0], [5.5, 1450.0], [5.6, 1470.0], [5.7, 1499.0], [5.8, 1511.0], [5.9, 1529.0], [6.0, 1544.0], [6.1, 1553.0], [6.2, 1574.0], [6.3, 1587.0], [6.4, 1609.0], [6.5, 1623.0], [6.6, 1634.0], [6.7, 1652.0], [6.8, 1662.0], [6.9, 1679.0], [7.0, 1697.0], [7.1, 1722.0], [7.2, 1740.0], [7.3, 1752.0], [7.4, 1766.0], [7.5, 1782.0], [7.6, 1800.0], [7.7, 1824.0], [7.8, 1838.0], [7.9, 1856.0], [8.0, 1870.0], [8.1, 1884.0], [8.2, 1894.0], [8.3, 1905.0], [8.4, 1922.0], [8.5, 1937.0], [8.6, 1946.0], [8.7, 1961.0], [8.8, 1982.0], [8.9, 1992.0], [9.0, 2002.0], [9.1, 2013.0], [9.2, 2028.0], [9.3, 2042.0], [9.4, 2057.0], [9.5, 2077.0], [9.6, 2089.0], [9.7, 2108.0], [9.8, 2126.0], [9.9, 2142.0], [10.0, 2154.0], [10.1, 2171.0], [10.2, 2183.0], [10.3, 2194.0], [10.4, 2209.0], [10.5, 2218.0], [10.6, 2239.0], [10.7, 2247.0], [10.8, 2260.0], [10.9, 2273.0], [11.0, 2286.0], [11.1, 2297.0], [11.2, 2304.0], [11.3, 2313.0], [11.4, 2325.0], [11.5, 2339.0], [11.6, 2348.0], [11.7, 2357.0], [11.8, 2369.0], [11.9, 2382.0], [12.0, 2389.0], [12.1, 2401.0], [12.2, 2408.0], [12.3, 2420.0], [12.4, 2439.0], [12.5, 2449.0], [12.6, 2461.0], [12.7, 2469.0], [12.8, 2484.0], [12.9, 2500.0], [13.0, 2507.0], [13.1, 2514.0], [13.2, 2532.0], [13.3, 2541.0], [13.4, 2553.0], [13.5, 2560.0], [13.6, 2569.0], [13.7, 2573.0], [13.8, 2587.0], [13.9, 2597.0], [14.0, 2606.0], [14.1, 2622.0], [14.2, 2630.0], [14.3, 2644.0], [14.4, 2650.0], [14.5, 2660.0], [14.6, 2669.0], [14.7, 2673.0], [14.8, 2680.0], [14.9, 2688.0], [15.0, 2698.0], [15.1, 2705.0], [15.2, 2716.0], [15.3, 2726.0], [15.4, 2735.0], [15.5, 2743.0], [15.6, 2748.0], [15.7, 2760.0], [15.8, 2772.0], [15.9, 2783.0], [16.0, 2797.0], [16.1, 2813.0], [16.2, 2817.0], [16.3, 2828.0], [16.4, 2840.0], [16.5, 2848.0], [16.6, 2861.0], [16.7, 2882.0], [16.8, 2888.0], [16.9, 2903.0], [17.0, 2916.0], [17.1, 2935.0], [17.2, 2941.0], [17.3, 2953.0], [17.4, 2963.0], [17.5, 2972.0], [17.6, 2981.0], [17.7, 2988.0], [17.8, 2995.0], [17.9, 3007.0], [18.0, 3016.0], [18.1, 3027.0], [18.2, 3040.0], [18.3, 3049.0], [18.4, 3055.0], [18.5, 3066.0], [18.6, 3077.0], [18.7, 3088.0], [18.8, 3100.0], [18.9, 3112.0], [19.0, 3118.0], [19.1, 3129.0], [19.2, 3143.0], [19.3, 3152.0], [19.4, 3162.0], [19.5, 3171.0], [19.6, 3177.0], [19.7, 3187.0], [19.8, 3195.0], [19.9, 3203.0], [20.0, 3214.0], [20.1, 3226.0], [20.2, 3234.0], [20.3, 3237.0], [20.4, 3251.0], [20.5, 3264.0], [20.6, 3271.0], [20.7, 3282.0], [20.8, 3289.0], [20.9, 3301.0], [21.0, 3312.0], [21.1, 3322.0], [21.2, 3332.0], [21.3, 3340.0], [21.4, 3349.0], [21.5, 3357.0], [21.6, 3366.0], [21.7, 3375.0], [21.8, 3383.0], [21.9, 3395.0], [22.0, 3407.0], [22.1, 3415.0], [22.2, 3425.0], [22.3, 3442.0], [22.4, 3449.0], [22.5, 3458.0], [22.6, 3474.0], [22.7, 3482.0], [22.8, 3492.0], [22.9, 3505.0], [23.0, 3510.0], [23.1, 3518.0], [23.2, 3530.0], [23.3, 3544.0], [23.4, 3552.0], [23.5, 3564.0], [23.6, 3568.0], [23.7, 3584.0], [23.8, 3588.0], [23.9, 3600.0], [24.0, 3607.0], [24.1, 3615.0], [24.2, 3623.0], [24.3, 3631.0], [24.4, 3636.0], [24.5, 3649.0], [24.6, 3657.0], [24.7, 3663.0], [24.8, 3670.0], [24.9, 3680.0], [25.0, 3692.0], [25.1, 3700.0], [25.2, 3712.0], [25.3, 3722.0], [25.4, 3735.0], [25.5, 3744.0], [25.6, 3755.0], [25.7, 3763.0], [25.8, 3769.0], [25.9, 3776.0], [26.0, 3784.0], [26.1, 3791.0], [26.2, 3802.0], [26.3, 3809.0], [26.4, 3816.0], [26.5, 3828.0], [26.6, 3832.0], [26.7, 3841.0], [26.8, 3849.0], [26.9, 3859.0], [27.0, 3868.0], [27.1, 3880.0], [27.2, 3886.0], [27.3, 3893.0], [27.4, 3901.0], [27.5, 3909.0], [27.6, 3919.0], [27.7, 3929.0], [27.8, 3935.0], [27.9, 3945.0], [28.0, 3954.0], [28.1, 3962.0], [28.2, 3973.0], [28.3, 3980.0], [28.4, 3991.0], [28.5, 4000.0], [28.6, 4005.0], [28.7, 4018.0], [28.8, 4024.0], [28.9, 4032.0], [29.0, 4042.0], [29.1, 4053.0], [29.2, 4060.0], [29.3, 4070.0], [29.4, 4077.0], [29.5, 4089.0], [29.6, 4094.0], [29.7, 4103.0], [29.8, 4114.0], [29.9, 4125.0], [30.0, 4129.0], [30.1, 4136.0], [30.2, 4149.0], [30.3, 4157.0], [30.4, 4162.0], [30.5, 4172.0], [30.6, 4183.0], [30.7, 4191.0], [30.8, 4196.0], [30.9, 4204.0], [31.0, 4211.0], [31.1, 4220.0], [31.2, 4226.0], [31.3, 4237.0], [31.4, 4245.0], [31.5, 4250.0], [31.6, 4259.0], [31.7, 4268.0], [31.8, 4277.0], [31.9, 4284.0], [32.0, 4290.0], [32.1, 4300.0], [32.2, 4303.0], [32.3, 4312.0], [32.4, 4324.0], [32.5, 4334.0], [32.6, 4345.0], [32.7, 4354.0], [32.8, 4362.0], [32.9, 4367.0], [33.0, 4374.0], [33.1, 4381.0], [33.2, 4388.0], [33.3, 4398.0], [33.4, 4407.0], [33.5, 4417.0], [33.6, 4423.0], [33.7, 4430.0], [33.8, 4440.0], [33.9, 4450.0], [34.0, 4458.0], [34.1, 4464.0], [34.2, 4470.0], [34.3, 4478.0], [34.4, 4486.0], [34.5, 4500.0], [34.6, 4507.0], [34.7, 4514.0], [34.8, 4528.0], [34.9, 4537.0], [35.0, 4543.0], [35.1, 4547.0], [35.2, 4553.0], [35.3, 4559.0], [35.4, 4564.0], [35.5, 4571.0], [35.6, 4582.0], [35.7, 4592.0], [35.8, 4605.0], [35.9, 4612.0], [36.0, 4622.0], [36.1, 4631.0], [36.2, 4639.0], [36.3, 4645.0], [36.4, 4651.0], [36.5, 4655.0], [36.6, 4663.0], [36.7, 4678.0], [36.8, 4687.0], [36.9, 4697.0], [37.0, 4705.0], [37.1, 4713.0], [37.2, 4722.0], [37.3, 4730.0], [37.4, 4738.0], [37.5, 4744.0], [37.6, 4750.0], [37.7, 4757.0], [37.8, 4770.0], [37.9, 4776.0], [38.0, 4785.0], [38.1, 4794.0], [38.2, 4801.0], [38.3, 4810.0], [38.4, 4817.0], [38.5, 4823.0], [38.6, 4828.0], [38.7, 4833.0], [38.8, 4838.0], [38.9, 4848.0], [39.0, 4854.0], [39.1, 4860.0], [39.2, 4868.0], [39.3, 4877.0], [39.4, 4887.0], [39.5, 4903.0], [39.6, 4911.0], [39.7, 4921.0], [39.8, 4927.0], [39.9, 4934.0], [40.0, 4942.0], [40.1, 4949.0], [40.2, 4959.0], [40.3, 4972.0], [40.4, 4977.0], [40.5, 4985.0], [40.6, 4995.0], [40.7, 5004.0], [40.8, 5012.0], [40.9, 5021.0], [41.0, 5031.0], [41.1, 5042.0], [41.2, 5049.0], [41.3, 5057.0], [41.4, 5062.0], [41.5, 5069.0], [41.6, 5074.0], [41.7, 5081.0], [41.8, 5087.0], [41.9, 5096.0], [42.0, 5104.0], [42.1, 5111.0], [42.2, 5116.0], [42.3, 5127.0], [42.4, 5139.0], [42.5, 5148.0], [42.6, 5154.0], [42.7, 5162.0], [42.8, 5168.0], [42.9, 5175.0], [43.0, 5187.0], [43.1, 5195.0], [43.2, 5206.0], [43.3, 5213.0], [43.4, 5221.0], [43.5, 5229.0], [43.6, 5236.0], [43.7, 5245.0], [43.8, 5251.0], [43.9, 5261.0], [44.0, 5266.0], [44.1, 5275.0], [44.2, 5282.0], [44.3, 5288.0], [44.4, 5292.0], [44.5, 5300.0], [44.6, 5310.0], [44.7, 5316.0], [44.8, 5322.0], [44.9, 5332.0], [45.0, 5342.0], [45.1, 5347.0], [45.2, 5356.0], [45.3, 5360.0], [45.4, 5369.0], [45.5, 5375.0], [45.6, 5385.0], [45.7, 5394.0], [45.8, 5401.0], [45.9, 5409.0], [46.0, 5417.0], [46.1, 5425.0], [46.2, 5433.0], [46.3, 5441.0], [46.4, 5450.0], [46.5, 5455.0], [46.6, 5462.0], [46.7, 5469.0], [46.8, 5480.0], [46.9, 5487.0], [47.0, 5496.0], [47.1, 5507.0], [47.2, 5512.0], [47.3, 5516.0], [47.4, 5524.0], [47.5, 5532.0], [47.6, 5540.0], [47.7, 5546.0], [47.8, 5551.0], [47.9, 5560.0], [48.0, 5567.0], [48.1, 5575.0], [48.2, 5584.0], [48.3, 5592.0], [48.4, 5598.0], [48.5, 5602.0], [48.6, 5611.0], [48.7, 5619.0], [48.8, 5624.0], [48.9, 5629.0], [49.0, 5638.0], [49.1, 5644.0], [49.2, 5650.0], [49.3, 5659.0], [49.4, 5665.0], [49.5, 5670.0], [49.6, 5678.0], [49.7, 5685.0], [49.8, 5688.0], [49.9, 5700.0], [50.0, 5706.0], [50.1, 5715.0], [50.2, 5724.0], [50.3, 5731.0], [50.4, 5735.0], [50.5, 5742.0], [50.6, 5749.0], [50.7, 5756.0], [50.8, 5765.0], [50.9, 5774.0], [51.0, 5778.0], [51.1, 5788.0], [51.2, 5798.0], [51.3, 5803.0], [51.4, 5816.0], [51.5, 5821.0], [51.6, 5824.0], [51.7, 5834.0], [51.8, 5839.0], [51.9, 5846.0], [52.0, 5850.0], [52.1, 5858.0], [52.2, 5863.0], [52.3, 5869.0], [52.4, 5875.0], [52.5, 5884.0], [52.6, 5890.0], [52.7, 5904.0], [52.8, 5914.0], [52.9, 5923.0], [53.0, 5932.0], [53.1, 5935.0], [53.2, 5939.0], [53.3, 5943.0], [53.4, 5949.0], [53.5, 5958.0], [53.6, 5963.0], [53.7, 5976.0], [53.8, 5984.0], [53.9, 5992.0], [54.0, 6000.0], [54.1, 6009.0], [54.2, 6018.0], [54.3, 6032.0], [54.4, 6037.0], [54.5, 6047.0], [54.6, 6060.0], [54.7, 6066.0], [54.8, 6071.0], [54.9, 6080.0], [55.0, 6086.0], [55.1, 6091.0], [55.2, 6100.0], [55.3, 6110.0], [55.4, 6115.0], [55.5, 6127.0], [55.6, 6137.0], [55.7, 6144.0], [55.8, 6154.0], [55.9, 6163.0], [56.0, 6169.0], [56.1, 6180.0], [56.2, 6187.0], [56.3, 6193.0], [56.4, 6202.0], [56.5, 6212.0], [56.6, 6217.0], [56.7, 6226.0], [56.8, 6234.0], [56.9, 6242.0], [57.0, 6247.0], [57.1, 6254.0], [57.2, 6263.0], [57.3, 6270.0], [57.4, 6276.0], [57.5, 6285.0], [57.6, 6294.0], [57.7, 6302.0], [57.8, 6310.0], [57.9, 6317.0], [58.0, 6323.0], [58.1, 6329.0], [58.2, 6335.0], [58.3, 6340.0], [58.4, 6346.0], [58.5, 6352.0], [58.6, 6359.0], [58.7, 6371.0], [58.8, 6383.0], [58.9, 6393.0], [59.0, 6405.0], [59.1, 6413.0], [59.2, 6423.0], [59.3, 6434.0], [59.4, 6439.0], [59.5, 6446.0], [59.6, 6459.0], [59.7, 6466.0], [59.8, 6474.0], [59.9, 6482.0], [60.0, 6488.0], [60.1, 6498.0], [60.2, 6510.0], [60.3, 6524.0], [60.4, 6530.0], [60.5, 6538.0], [60.6, 6548.0], [60.7, 6556.0], [60.8, 6559.0], [60.9, 6570.0], [61.0, 6578.0], [61.1, 6585.0], [61.2, 6594.0], [61.3, 6599.0], [61.4, 6609.0], [61.5, 6619.0], [61.6, 6626.0], [61.7, 6638.0], [61.8, 6647.0], [61.9, 6656.0], [62.0, 6660.0], [62.1, 6666.0], [62.2, 6672.0], [62.3, 6680.0], [62.4, 6689.0], [62.5, 6697.0], [62.6, 6705.0], [62.7, 6727.0], [62.8, 6733.0], [62.9, 6737.0], [63.0, 6743.0], [63.1, 6753.0], [63.2, 6761.0], [63.3, 6771.0], [63.4, 6779.0], [63.5, 6794.0], [63.6, 6802.0], [63.7, 6815.0], [63.8, 6824.0], [63.9, 6834.0], [64.0, 6841.0], [64.1, 6846.0], [64.2, 6855.0], [64.3, 6869.0], [64.4, 6875.0], [64.5, 6882.0], [64.6, 6889.0], [64.7, 6906.0], [64.8, 6914.0], [64.9, 6921.0], [65.0, 6930.0], [65.1, 6941.0], [65.2, 6951.0], [65.3, 6959.0], [65.4, 6966.0], [65.5, 6976.0], [65.6, 6984.0], [65.7, 6996.0], [65.8, 7003.0], [65.9, 7013.0], [66.0, 7022.0], [66.1, 7030.0], [66.2, 7039.0], [66.3, 7052.0], [66.4, 7062.0], [66.5, 7073.0], [66.6, 7084.0], [66.7, 7092.0], [66.8, 7105.0], [66.9, 7118.0], [67.0, 7128.0], [67.1, 7136.0], [67.2, 7146.0], [67.3, 7155.0], [67.4, 7166.0], [67.5, 7173.0], [67.6, 7182.0], [67.7, 7190.0], [67.8, 7200.0], [67.9, 7205.0], [68.0, 7218.0], [68.1, 7230.0], [68.2, 7241.0], [68.3, 7254.0], [68.4, 7258.0], [68.5, 7276.0], [68.6, 7285.0], [68.7, 7292.0], [68.8, 7300.0], [68.9, 7310.0], [69.0, 7321.0], [69.1, 7332.0], [69.2, 7346.0], [69.3, 7359.0], [69.4, 7371.0], [69.5, 7383.0], [69.6, 7394.0], [69.7, 7404.0], [69.8, 7418.0], [69.9, 7430.0], [70.0, 7442.0], [70.1, 7455.0], [70.2, 7469.0], [70.3, 7478.0], [70.4, 7487.0], [70.5, 7495.0], [70.6, 7504.0], [70.7, 7511.0], [70.8, 7520.0], [70.9, 7528.0], [71.0, 7536.0], [71.1, 7541.0], [71.2, 7550.0], [71.3, 7567.0], [71.4, 7585.0], [71.5, 7599.0], [71.6, 7611.0], [71.7, 7621.0], [71.8, 7629.0], [71.9, 7640.0], [72.0, 7651.0], [72.1, 7659.0], [72.2, 7665.0], [72.3, 7678.0], [72.4, 7691.0], [72.5, 7701.0], [72.6, 7706.0], [72.7, 7721.0], [72.8, 7734.0], [72.9, 7748.0], [73.0, 7761.0], [73.1, 7770.0], [73.2, 7781.0], [73.3, 7795.0], [73.4, 7802.0], [73.5, 7816.0], [73.6, 7833.0], [73.7, 7855.0], [73.8, 7867.0], [73.9, 7883.0], [74.0, 7895.0], [74.1, 7910.0], [74.2, 7926.0], [74.3, 7933.0], [74.4, 7940.0], [74.5, 7951.0], [74.6, 7964.0], [74.7, 7975.0], [74.8, 7993.0], [74.9, 8003.0], [75.0, 8014.0], [75.1, 8025.0], [75.2, 8041.0], [75.3, 8045.0], [75.4, 8059.0], [75.5, 8068.0], [75.6, 8078.0], [75.7, 8090.0], [75.8, 8105.0], [75.9, 8119.0], [76.0, 8128.0], [76.1, 8141.0], [76.2, 8155.0], [76.3, 8166.0], [76.4, 8179.0], [76.5, 8194.0], [76.6, 8209.0], [76.7, 8229.0], [76.8, 8238.0], [76.9, 8253.0], [77.0, 8268.0], [77.1, 8281.0], [77.2, 8293.0], [77.3, 8303.0], [77.4, 8312.0], [77.5, 8325.0], [77.6, 8338.0], [77.7, 8348.0], [77.8, 8361.0], [77.9, 8385.0], [78.0, 8403.0], [78.1, 8424.0], [78.2, 8438.0], [78.3, 8443.0], [78.4, 8459.0], [78.5, 8466.0], [78.6, 8491.0], [78.7, 8513.0], [78.8, 8531.0], [78.9, 8544.0], [79.0, 8555.0], [79.1, 8564.0], [79.2, 8578.0], [79.3, 8593.0], [79.4, 8607.0], [79.5, 8616.0], [79.6, 8631.0], [79.7, 8653.0], [79.8, 8671.0], [79.9, 8680.0], [80.0, 8698.0], [80.1, 8713.0], [80.2, 8728.0], [80.3, 8750.0], [80.4, 8767.0], [80.5, 8783.0], [80.6, 8806.0], [80.7, 8816.0], [80.8, 8825.0], [80.9, 8846.0], [81.0, 8860.0], [81.1, 8880.0], [81.2, 8891.0], [81.3, 8911.0], [81.4, 8921.0], [81.5, 8940.0], [81.6, 8962.0], [81.7, 8981.0], [81.8, 9004.0], [81.9, 9020.0], [82.0, 9042.0], [82.1, 9057.0], [82.2, 9069.0], [82.3, 9081.0], [82.4, 9101.0], [82.5, 9121.0], [82.6, 9130.0], [82.7, 9146.0], [82.8, 9165.0], [82.9, 9178.0], [83.0, 9192.0], [83.1, 9204.0], [83.2, 9226.0], [83.3, 9244.0], [83.4, 9260.0], [83.5, 9280.0], [83.6, 9295.0], [83.7, 9313.0], [83.8, 9327.0], [83.9, 9354.0], [84.0, 9369.0], [84.1, 9384.0], [84.2, 9401.0], [84.3, 9422.0], [84.4, 9450.0], [84.5, 9464.0], [84.6, 9478.0], [84.7, 9491.0], [84.8, 9521.0], [84.9, 9552.0], [85.0, 9570.0], [85.1, 9592.0], [85.2, 9604.0], [85.3, 9632.0], [85.4, 9671.0], [85.5, 9704.0], [85.6, 9730.0], [85.7, 9753.0], [85.8, 9763.0], [85.9, 9792.0], [86.0, 9813.0], [86.1, 9839.0], [86.2, 9863.0], [86.3, 9885.0], [86.4, 9907.0], [86.5, 9920.0], [86.6, 9942.0], [86.7, 9973.0], [86.8, 9994.0], [86.9, 10023.0], [87.0, 10058.0], [87.1, 10074.0], [87.2, 10102.0], [87.3, 10116.0], [87.4, 10141.0], [87.5, 10165.0], [87.6, 10180.0], [87.7, 10224.0], [87.8, 10252.0], [87.9, 10282.0], [88.0, 10307.0], [88.1, 10332.0], [88.2, 10353.0], [88.3, 10374.0], [88.4, 10396.0], [88.5, 10430.0], [88.6, 10444.0], [88.7, 10473.0], [88.8, 10490.0], [88.9, 10525.0], [89.0, 10560.0], [89.1, 10602.0], [89.2, 10645.0], [89.3, 10680.0], [89.4, 10711.0], [89.5, 10733.0], [89.6, 10754.0], [89.7, 10788.0], [89.8, 10831.0], [89.9, 10876.0], [90.0, 10912.0], [90.1, 10941.0], [90.2, 10968.0], [90.3, 11008.0], [90.4, 11033.0], [90.5, 11073.0], [90.6, 11124.0], [90.7, 11172.0], [90.8, 11214.0], [90.9, 11238.0], [91.0, 11315.0], [91.1, 11352.0], [91.2, 11399.0], [91.3, 11442.0], [91.4, 11486.0], [91.5, 11540.0], [91.6, 11572.0], [91.7, 11621.0], [91.8, 11686.0], [91.9, 11718.0], [92.0, 11761.0], [92.1, 11828.0], [92.2, 11873.0], [92.3, 11954.0], [92.4, 12002.0], [92.5, 12054.0], [92.6, 12107.0], [92.7, 12196.0], [92.8, 12265.0], [92.9, 12304.0], [93.0, 12348.0], [93.1, 12413.0], [93.2, 12472.0], [93.3, 12553.0], [93.4, 12606.0], [93.5, 12699.0], [93.6, 12852.0], [93.7, 12888.0], [93.8, 12985.0], [93.9, 13038.0], [94.0, 13107.0], [94.1, 13234.0], [94.2, 13285.0], [94.3, 13354.0], [94.4, 13435.0], [94.5, 13558.0], [94.6, 13616.0], [94.7, 13708.0], [94.8, 13794.0], [94.9, 13930.0], [95.0, 13994.0], [95.1, 14089.0], [95.2, 14188.0], [95.3, 14280.0], [95.4, 14353.0], [95.5, 14463.0], [95.6, 14596.0], [95.7, 14698.0], [95.8, 14800.0], [95.9, 14889.0], [96.0, 14993.0], [96.1, 15088.0], [96.2, 15179.0], [96.3, 15332.0], [96.4, 15512.0], [96.5, 15626.0], [96.6, 15793.0], [96.7, 16016.0], [96.8, 16122.0], [96.9, 16276.0], [97.0, 16415.0], [97.1, 16700.0], [97.2, 16824.0], [97.3, 16987.0], [97.4, 17207.0], [97.5, 17395.0], [97.6, 17611.0], [97.7, 17883.0], [97.8, 18179.0], [97.9, 18542.0], [98.0, 18868.0], [98.1, 19314.0], [98.2, 19564.0], [98.3, 19859.0], [98.4, 20069.0], [98.5, 20255.0], [98.6, 20532.0], [98.7, 21130.0], [98.8, 21872.0], [98.9, 22653.0], [99.0, 23134.0], [99.1, 23531.0], [99.2, 24427.0], [99.3, 25365.0], [99.4, 26377.0], [99.5, 27331.0], [99.6, 28867.0], [99.7, 31544.0], [99.8, 41288.0], [99.9, 58831.0], [100.0, 259637.0]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 144.0, "series": [{"data": [[182500.0, 1.0], [79500.0, 1.0], [121900.0, 1.0], [100.0, 41.0], [37300.0, 2.0], [43300.0, 1.0], [49300.0, 1.0], [200.0, 27.0], [54900.0, 1.0], [59700.0, 1.0], [300.0, 17.0], [400.0, 19.0], [500.0, 33.0], [600.0, 36.0], [700.0, 41.0], [800.0, 56.0], [900.0, 55.0], [1000.0, 49.0], [1100.0, 46.0], [1200.0, 62.0], [1300.0, 42.0], [1400.0, 47.0], [1500.0, 63.0], [1600.0, 69.0], [1700.0, 57.0], [1800.0, 65.0], [1900.0, 74.0], [2000.0, 65.0], [2100.0, 71.0], [2200.0, 80.0], [2300.0, 95.0], [2400.0, 80.0], [2500.0, 104.0], [2600.0, 110.0], [2800.0, 82.0], [2700.0, 101.0], [2900.0, 97.0], [3000.0, 96.0], [3100.0, 109.0], [3300.0, 104.0], [3200.0, 99.0], [3400.0, 94.0], [3500.0, 103.0], [3600.0, 118.0], [3700.0, 111.0], [3800.0, 120.0], [3900.0, 111.0], [4000.0, 116.0], [4300.0, 122.0], [4100.0, 118.0], [4200.0, 126.0], [4400.0, 118.0], [4600.0, 121.0], [4500.0, 126.0], [4700.0, 119.0], [4800.0, 133.0], [5000.0, 127.0], [4900.0, 117.0], [5100.0, 121.0], [5300.0, 127.0], [5200.0, 136.0], [5400.0, 127.0], [5600.0, 144.0], [5500.0, 142.0], [5700.0, 134.0], [5800.0, 141.0], [6000.0, 120.0], [6100.0, 117.0], [5900.0, 135.0], [6200.0, 128.0], [6300.0, 132.0], [6600.0, 121.0], [6500.0, 119.0], [6400.0, 115.0], [6700.0, 106.0], [6900.0, 109.0], [6800.0, 108.0], [7100.0, 104.0], [7000.0, 101.0], [7300.0, 88.0], [7400.0, 87.0], [7200.0, 99.0], [7500.0, 98.0], [7600.0, 97.0], [120900.0, 1.0], [7800.0, 66.0], [7700.0, 90.0], [7900.0, 82.0], [8000.0, 90.0], [8100.0, 78.0], [8200.0, 72.0], [8400.0, 68.0], [8700.0, 55.0], [8300.0, 73.0], [8600.0, 67.0], [8500.0, 68.0], [9200.0, 55.0], [8900.0, 52.0], [8800.0, 68.0], [9000.0, 62.0], [9100.0, 67.0], [143800.0, 1.0], [9400.0, 59.0], [9600.0, 35.0], [9300.0, 57.0], [9700.0, 46.0], [9500.0, 36.0], [9800.0, 41.0], [10100.0, 47.0], [9900.0, 48.0], [10000.0, 36.0], [10200.0, 30.0], [10600.0, 29.0], [10700.0, 35.0], [10500.0, 24.0], [10300.0, 46.0], [10400.0, 42.0], [11200.0, 20.0], [11100.0, 19.0], [11000.0, 30.0], [10900.0, 32.0], [10800.0, 24.0], [11600.0, 17.0], [11500.0, 26.0], [11300.0, 23.0], [11400.0, 20.0], [11700.0, 19.0], [11800.0, 22.0], [12000.0, 21.0], [12200.0, 14.0], [11900.0, 14.0], [12100.0, 13.0], [12300.0, 19.0], [12600.0, 14.0], [12400.0, 17.0], [12500.0, 14.0], [12700.0, 5.0], [13300.0, 13.0], [13200.0, 14.0], [13100.0, 9.0], [13000.0, 16.0], [12800.0, 17.0], [12900.0, 9.0], [13400.0, 12.0], [13600.0, 15.0], [13800.0, 7.0], [13500.0, 9.0], [13700.0, 11.0], [13900.0, 13.0], [14000.0, 10.0], [14300.0, 10.0], [14200.0, 13.0], [14100.0, 11.0], [14500.0, 7.0], [14400.0, 9.0], [14800.0, 11.0], [14700.0, 7.0], [14600.0, 12.0], [15300.0, 5.0], [15100.0, 10.0], [14900.0, 11.0], [15000.0, 11.0], [15200.0, 6.0], [15500.0, 9.0], [15700.0, 5.0], [15400.0, 6.0], [15800.0, 4.0], [15600.0, 7.0], [16200.0, 8.0], [16100.0, 5.0], [15900.0, 4.0], [16300.0, 6.0], [16000.0, 11.0], [17400.0, 5.0], [16400.0, 5.0], [16800.0, 9.0], [16600.0, 4.0], [17200.0, 5.0], [17000.0, 2.0], [18000.0, 5.0], [17600.0, 4.0], [17800.0, 5.0], [18200.0, 5.0], [18800.0, 3.0], [19400.0, 4.0], [18600.0, 2.0], [19200.0, 1.0], [20000.0, 11.0], [19600.0, 3.0], [20200.0, 4.0], [20400.0, 5.0], [19800.0, 5.0], [21400.0, 2.0], [20600.0, 3.0], [21000.0, 1.0], [21200.0, 1.0], [22200.0, 1.0], [22000.0, 2.0], [21800.0, 1.0], [23200.0, 4.0], [22600.0, 4.0], [23000.0, 2.0], [22800.0, 1.0], [23400.0, 1.0], [23800.0, 3.0], [24000.0, 2.0], [24400.0, 1.0], [24600.0, 3.0], [25000.0, 1.0], [26600.0, 2.0], [25600.0, 1.0], [26400.0, 2.0], [26000.0, 2.0], [26200.0, 1.0], [27400.0, 1.0], [27600.0, 1.0], [28400.0, 1.0], [29000.0, 2.0], [29600.0, 1.0], [28800.0, 1.0], [30600.0, 1.0], [30800.0, 1.0], [31200.0, 1.0], [31800.0, 1.0], [32000.0, 1.0], [34000.0, 1.0], [35200.0, 1.0], [37600.0, 1.0], [41200.0, 1.0], [46800.0, 1.0], [50400.0, 1.0], [54800.0, 1.0], [58800.0, 1.0], [63200.0, 1.0], [48700.0, 1.0], [49900.0, 1.0], [259600.0, 1.0], [197400.0, 1.0], [17300.0, 8.0], [16900.0, 5.0], [16700.0, 7.0], [16500.0, 2.0], [17100.0, 6.0], [18300.0, 2.0], [18100.0, 2.0], [17700.0, 4.0], [17500.0, 3.0], [17900.0, 1.0], [18500.0, 4.0], [19300.0, 4.0], [18700.0, 6.0], [18900.0, 5.0], [19100.0, 1.0], [19900.0, 2.0], [19500.0, 4.0], [20300.0, 4.0], [19700.0, 3.0], [20100.0, 1.0], [20900.0, 1.0], [21100.0, 4.0], [20500.0, 3.0], [21300.0, 1.0], [21500.0, 1.0], [20700.0, 1.0], [21700.0, 2.0], [21900.0, 2.0], [22300.0, 1.0], [23100.0, 5.0], [22700.0, 4.0], [22900.0, 1.0], [23500.0, 1.0], [23300.0, 1.0], [24100.0, 2.0], [24500.0, 3.0], [23900.0, 1.0], [23700.0, 1.0], [25100.0, 1.0], [25300.0, 2.0], [25900.0, 1.0], [26500.0, 1.0], [25700.0, 3.0], [26300.0, 1.0], [26100.0, 1.0], [26700.0, 4.0], [27500.0, 1.0], [27300.0, 1.0], [27900.0, 1.0], [28500.0, 1.0], [28300.0, 2.0], [28700.0, 1.0], [30100.0, 1.0], [31500.0, 3.0], [31700.0, 1.0], [35000.0, 1.0], [51400.0, 1.0], [76400.0, 1.0]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 259600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9427.0, "series": [{"data": [[0.0, 104.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 467.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9427.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.061611374407589, "minX": 1.74904242E12, "maxY": 100.0, "series": [{"data": [[1.74904296E12, 98.35673187571916], [1.74904266E12, 100.0], [1.74904302E12, 89.9482163406214], [1.7490429E12, 100.0], [1.7490426E12, 100.0], [1.74904248E12, 100.0], [1.74904314E12, 11.061611374407589], [1.74904284E12, 100.0], [1.74904254E12, 100.0], [1.74904272E12, 100.0], [1.74904242E12, 89.573002754821], [1.74904308E12, 54.51489868891545], [1.74904278E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74904314E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 221.33333333333334, "minX": 1.0, "maxY": 15376.250000000002, "series": [{"data": [[2.0, 15376.250000000002], [3.0, 221.33333333333334], [4.0, 347.0], [5.0, 336.4], [6.0, 461.14285714285717], [7.0, 601.0], [8.0, 595.5384615384615], [9.0, 563.0], [10.0, 939.0], [11.0, 797.2], [12.0, 1236.7142857142856], [13.0, 1200.3333333333333], [14.0, 1454.0], [15.0, 1305.0], [16.0, 1062.064516129032], [17.0, 1120.4117647058824], [18.0, 1511.181818181818], [19.0, 1889.7142857142858], [20.0, 1791.0], [21.0, 2057.941176470588], [22.0, 1616.6666666666667], [23.0, 1920.8275862068963], [24.0, 2057.285714285714], [25.0, 629.0], [26.0, 2572.0], [27.0, 1823.0526315789475], [28.0, 2068.8823529411766], [29.0, 2314.5555555555557], [30.0, 2080.88], [31.0, 2337.4444444444443], [33.0, 4871.6], [32.0, 2563.75], [34.0, 2884.3333333333335], [35.0, 3701.0000000000005], [36.0, 861.0], [37.0, 2265.8], [39.0, 2023.3636363636367], [38.0, 4783.650000000001], [41.0, 2499.4], [40.0, 3174.714285714286], [42.0, 3522.3333333333335], [43.0, 2822.75], [44.0, 2862.5], [45.0, 3006.0], [47.0, 3091.4333333333325], [46.0, 1544.0], [48.0, 2663.9000000000005], [49.0, 4693.25], [50.0, 3495.3333333333335], [51.0, 3050.428571428571], [52.0, 3341.823529411765], [53.0, 2810.0], [54.0, 3057.6923076923076], [55.0, 4845.0], [56.0, 3141.0999999999995], [57.0, 3313.222222222222], [59.0, 3955.1111111111113], [58.0, 3569.375], [60.0, 6514.809523809523], [61.0, 4019.0], [62.0, 3932.1249999999995], [63.0, 3187.4285714285716], [65.0, 4281.166666666666], [67.0, 5001.500000000001], [66.0, 4253.727272727272], [64.0, 4219.190476190475], [68.0, 4547.749999999999], [70.0, 4228.629629629631], [71.0, 5126.750000000002], [69.0, 4358.809523809523], [72.0, 3045.0], [73.0, 5358.242424242422], [75.0, 4656.571428571428], [74.0, 6079.090909090909], [76.0, 4054.0], [79.0, 6136.4], [78.0, 6181.312499999998], [77.0, 5213.5], [80.0, 4434.222222222223], [82.0, 5672.260869565216], [83.0, 8257.0], [81.0, 5752.648648648648], [84.0, 5294.565217391303], [85.0, 5599.247422680412], [86.0, 6145.23], [87.0, 6056.064516129032], [88.0, 4965.333333333331], [90.0, 4742.666666666667], [91.0, 5616.857142857142], [89.0, 5998.535211267606], [93.0, 5632.8], [94.0, 7814.5], [95.0, 6427.922636103152], [92.0, 6074.467741935483], [96.0, 7681.413793103449], [97.0, 6857.461883408075], [98.0, 6901.306930693071], [99.0, 6925.433333333334], [100.0, 6968.240567336831], [1.0, 7454.222222222219]], "isOverall": false, "label": "bobobobo.com", "isController": false}, {"data": [[92.91240000000009, 6519.417599999985]], "isOverall": false, "label": "bobobobo.com-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 400.9, "minX": 1.74904242E12, "maxY": 1.8023117583333332E7, "series": [{"data": [[1.74904296E12, 1.791990425E7], [1.74904266E12, 1.7651501083333332E7], [1.74904302E12, 1.7940516766666666E7], [1.7490429E12, 1.744505085E7], [1.7490426E12, 1.767213365E7], [1.74904248E12, 1.8023117583333332E7], [1.74904314E12, 4356102.416666667], [1.74904284E12, 1.71353655E7], [1.74904254E12, 1.779603665E7], [1.74904272E12, 1.7775362533333335E7], [1.74904242E12, 7494139.583333333], [1.74904308E12, 1.73211831E7], [1.74904278E12, 1.7878594433333334E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74904296E12, 1649.2], [1.74904266E12, 1624.5], [1.74904302E12, 1651.1], [1.7490429E12, 1605.5], [1.7490426E12, 1626.4], [1.74904248E12, 1658.7], [1.74904314E12, 400.9], [1.74904284E12, 1577.0], [1.74904254E12, 1637.8], [1.74904272E12, 1635.9], [1.74904242E12, 689.7], [1.74904308E12, 1594.1], [1.74904278E12, 1645.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74904314E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2700.611374407583, "minX": 1.74904242E12, "maxY": 7197.437644341799, "series": [{"data": [[1.74904296E12, 6885.655926352121], [1.74904266E12, 7051.0584795321665], [1.74904302E12, 6148.715765247411], [1.7490429E12, 7129.328994082836], [1.7490426E12, 6976.108644859815], [1.74904248E12, 6684.492554410084], [1.74904314E12, 2700.611374407583], [1.74904284E12, 7029.973493975897], [1.74904254E12, 6877.650057937422], [1.74904272E12, 7001.614401858305], [1.74904242E12, 5493.567493112951], [1.74904308E12, 4066.272943980929], [1.74904278E12, 7197.437644341799]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74904314E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 116.72511848341233, "minX": 1.74904242E12, "maxY": 298.8528389339509, "series": [{"data": [[1.74904296E12, 243.35443037974667], [1.74904266E12, 244.9274853801169], [1.74904302E12, 239.02761795166867], [1.7490429E12, 276.2828402366862], [1.7490426E12, 245.37733644859838], [1.74904248E12, 233.5555555555556], [1.74904314E12, 116.72511848341233], [1.74904284E12, 255.75662650602408], [1.74904254E12, 298.8528389339509], [1.74904272E12, 258.7073170731709], [1.74904242E12, 246.95592286501386], [1.74904308E12, 201.70202622169242], [1.74904278E12, 237.3995381062352]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74904314E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.616113744075831, "minX": 1.74904242E12, "maxY": 56.148760330578526, "series": [{"data": [[1.74904296E12, 14.344073647871113], [1.74904266E12, 14.314619883040942], [1.74904302E12, 11.39470655926352], [1.7490429E12, 19.685207100591708], [1.7490426E12, 12.406542056074768], [1.74904248E12, 11.756013745704463], [1.74904314E12, 5.616113744075831], [1.74904284E12, 20.693975903614458], [1.74904254E12, 13.812282734646598], [1.74904272E12, 14.693379790940767], [1.74904242E12, 56.148760330578526], [1.74904308E12, 9.71275327771156], [1.74904278E12, 15.323325635103927]], "isOverall": false, "label": "bobobobo.com", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74904314E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 106.0, "minX": 1.74904242E12, "maxY": 259637.0, "series": [{"data": [[1.74904296E12, 76450.0], [1.74904266E12, 259637.0], [1.74904302E12, 31221.0], [1.7490429E12, 63291.0], [1.7490426E12, 120917.0], [1.74904248E12, 27984.0], [1.74904314E12, 197472.0], [1.74904284E12, 34096.0], [1.74904254E12, 54881.0], [1.74904272E12, 79534.0], [1.74904242E12, 20092.0], [1.74904308E12, 37660.0], [1.74904278E12, 143861.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74904296E12, 395.0], [1.74904266E12, 501.0], [1.74904302E12, 413.0], [1.7490429E12, 298.0], [1.7490426E12, 364.0], [1.74904248E12, 786.0], [1.74904314E12, 106.0], [1.74904284E12, 456.0], [1.74904254E12, 982.0], [1.74904272E12, 685.0], [1.74904242E12, 499.0], [1.74904308E12, 249.0], [1.74904278E12, 551.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74904296E12, 11217.0], [1.74904266E12, 10847.399999999998], [1.74904302E12, 10442.0], [1.7490429E12, 13756.999999999995], [1.7490426E12, 10826.700000000003], [1.74904248E12, 10324.2], [1.74904314E12, 2126.8000000000015], [1.74904284E12, 13222.499999999998], [1.74904254E12, 10415.400000000001], [1.74904272E12, 11389.400000000005], [1.74904242E12, 9494.0], [1.74904308E12, 6977.0], [1.74904278E12, 11808.800000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74904296E12, 24697.99999999997], [1.74904266E12, 20469.12], [1.74904302E12, 20371.699999999993], [1.7490429E12, 26617.97999999999], [1.7490426E12, 22427.559999999947], [1.74904248E12, 20227.71999999999], [1.74904314E12, 161354.1199999992], [1.74904284E12, 24394.129999999954], [1.74904254E12, 17872.960000000003], [1.74904272E12, 25838.079999999998], [1.74904242E12, 16073.440000000019], [1.74904308E12, 21303.400000000005], [1.74904278E12, 27501.310000000132]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74904296E12, 6076.0], [1.74904266E12, 6276.0], [1.74904302E12, 5464.0], [1.7490429E12, 5909.0], [1.7490426E12, 6287.5], [1.74904248E12, 6045.0], [1.74904314E12, 704.0], [1.74904284E12, 6028.0], [1.74904254E12, 6176.5], [1.74904272E12, 6127.0], [1.74904242E12, 5144.0], [1.74904308E12, 3228.0], [1.74904278E12, 6098.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74904296E12, 14724.899999999998], [1.74904266E12, 13948.8], [1.74904302E12, 12386.5], [1.7490429E12, 16985.2], [1.7490426E12, 12948.149999999996], [1.74904248E12, 13559.599999999999], [1.74904314E12, 2570.3999999999915], [1.74904284E12, 15158.349999999993], [1.74904254E12, 12596.999999999985], [1.74904272E12, 15845.599999999995], [1.74904242E12, 11479.000000000004], [1.74904308E12, 9229.0], [1.74904278E12, 14807.15]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74904314E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 191.0, "minX": 1.0, "maxY": 121932.0, "series": [{"data": [[8.0, 3629.0], [9.0, 5382.0], [10.0, 5608.5], [11.0, 5663.5], [12.0, 5667.0], [13.0, 5651.0], [14.0, 5316.0], [15.0, 5862.0], [16.0, 5902.5], [4.0, 1440.0], [1.0, 191.0], [17.0, 5871.5], [18.0, 5804.0], [19.0, 5570.5], [20.0, 6142.5], [5.0, 1063.0], [21.0, 6006.0], [22.0, 5980.0], [23.0, 6323.0], [6.0, 2365.0], [24.0, 6382.5], [25.0, 6706.5], [26.0, 6347.0], [7.0, 5231.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 13962.0], [13.0, 121932.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 71.0, "minX": 1.0, "maxY": 59049.0, "series": [{"data": [[8.0, 182.5], [9.0, 199.5], [10.0, 220.5], [11.0, 190.0], [12.0, 200.0], [13.0, 198.0], [14.0, 197.5], [15.0, 208.0], [16.0, 197.0], [4.0, 104.5], [1.0, 71.0], [17.0, 201.0], [18.0, 200.0], [19.0, 201.0], [20.0, 202.0], [5.0, 164.0], [21.0, 212.0], [22.0, 212.0], [23.0, 201.0], [6.0, 148.5], [24.0, 207.5], [25.0, 283.0], [26.0, 194.0], [7.0, 158.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 160.0], [13.0, 59049.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.1333333333333333, "minX": 1.74904242E12, "maxY": 14.55, "series": [{"data": [[1.74904296E12, 14.4], [1.74904266E12, 14.25], [1.74904302E12, 14.233333333333333], [1.7490429E12, 14.083333333333334], [1.7490426E12, 14.266666666666667], [1.74904248E12, 14.55], [1.74904314E12, 3.1333333333333333], [1.74904284E12, 13.833333333333334], [1.74904254E12, 14.383333333333333], [1.74904272E12, 14.35], [1.74904242E12, 7.716666666666667], [1.74904308E12, 13.033333333333333], [1.74904278E12, 14.433333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74904314E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74904242E12, "maxY": 14.55, "series": [{"data": [[1.74904296E12, 14.466666666666667], [1.74904266E12, 14.25], [1.74904302E12, 14.483333333333333], [1.7490429E12, 14.083333333333334], [1.7490426E12, 14.266666666666667], [1.74904248E12, 14.55], [1.74904314E12, 3.5166666666666666], [1.74904284E12, 13.833333333333334], [1.74904254E12, 14.366666666666667], [1.74904272E12, 14.35], [1.74904242E12, 6.05], [1.74904308E12, 13.983333333333333], [1.74904278E12, 14.433333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.74904296E12, 0.016666666666666666], [1.74904254E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74904314E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74904242E12, "maxY": 14.55, "series": [{"data": [[1.74904296E12, 14.466666666666667], [1.74904266E12, 14.25], [1.74904302E12, 14.483333333333333], [1.7490429E12, 14.083333333333334], [1.7490426E12, 14.266666666666667], [1.74904248E12, 14.55], [1.74904314E12, 3.5166666666666666], [1.74904284E12, 13.833333333333334], [1.74904254E12, 14.366666666666667], [1.74904272E12, 14.35], [1.74904242E12, 6.05], [1.74904308E12, 13.983333333333333], [1.74904278E12, 14.433333333333334]], "isOverall": false, "label": "bobobobo.com-success", "isController": false}, {"data": [[1.74904296E12, 0.016666666666666666], [1.74904254E12, 0.016666666666666666]], "isOverall": false, "label": "bobobobo.com-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74904314E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74904242E12, "maxY": 14.55, "series": [{"data": [[1.74904296E12, 14.466666666666667], [1.74904266E12, 14.25], [1.74904302E12, 14.483333333333333], [1.7490429E12, 14.083333333333334], [1.7490426E12, 14.266666666666667], [1.74904248E12, 14.55], [1.74904314E12, 3.5166666666666666], [1.74904284E12, 13.833333333333334], [1.74904254E12, 14.366666666666667], [1.74904272E12, 14.35], [1.74904242E12, 6.05], [1.74904308E12, 13.983333333333333], [1.74904278E12, 14.433333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74904296E12, 0.016666666666666666], [1.74904254E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74904314E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

