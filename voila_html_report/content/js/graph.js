/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 32.0, "minX": 0.0, "maxY": 102926.0, "series": [{"data": [[0.0, 32.0], [0.1, 33.0], [0.2, 35.0], [0.3, 35.0], [0.4, 35.0], [0.5, 36.0], [0.6, 37.0], [0.7, 38.0], [0.8, 39.0], [0.9, 39.0], [1.0, 40.0], [1.1, 41.0], [1.2, 42.0], [1.3, 44.0], [1.4, 45.0], [1.5, 46.0], [1.6, 47.0], [1.7, 48.0], [1.8, 49.0], [1.9, 49.0], [2.0, 50.0], [2.1, 50.0], [2.2, 50.0], [2.3, 51.0], [2.4, 51.0], [2.5, 52.0], [2.6, 52.0], [2.7, 53.0], [2.8, 53.0], [2.9, 53.0], [3.0, 54.0], [3.1, 54.0], [3.2, 55.0], [3.3, 55.0], [3.4, 56.0], [3.5, 56.0], [3.6, 57.0], [3.7, 57.0], [3.8, 57.0], [3.9, 58.0], [4.0, 58.0], [4.1, 59.0], [4.2, 59.0], [4.3, 59.0], [4.4, 59.0], [4.5, 60.0], [4.6, 60.0], [4.7, 61.0], [4.8, 61.0], [4.9, 61.0], [5.0, 62.0], [5.1, 62.0], [5.2, 62.0], [5.3, 62.0], [5.4, 63.0], [5.5, 63.0], [5.6, 63.0], [5.7, 63.0], [5.8, 64.0], [5.9, 64.0], [6.0, 64.0], [6.1, 65.0], [6.2, 65.0], [6.3, 65.0], [6.4, 66.0], [6.5, 66.0], [6.6, 66.0], [6.7, 66.0], [6.8, 66.0], [6.9, 67.0], [7.0, 67.0], [7.1, 67.0], [7.2, 67.0], [7.3, 68.0], [7.4, 68.0], [7.5, 68.0], [7.6, 69.0], [7.7, 69.0], [7.8, 69.0], [7.9, 69.0], [8.0, 70.0], [8.1, 70.0], [8.2, 70.0], [8.3, 70.0], [8.4, 71.0], [8.5, 71.0], [8.6, 71.0], [8.7, 71.0], [8.8, 72.0], [8.9, 72.0], [9.0, 73.0], [9.1, 73.0], [9.2, 73.0], [9.3, 74.0], [9.4, 74.0], [9.5, 74.0], [9.6, 74.0], [9.7, 75.0], [9.8, 75.0], [9.9, 75.0], [10.0, 75.0], [10.1, 76.0], [10.2, 76.0], [10.3, 76.0], [10.4, 76.0], [10.5, 77.0], [10.6, 77.0], [10.7, 77.0], [10.8, 78.0], [10.9, 78.0], [11.0, 78.0], [11.1, 78.0], [11.2, 79.0], [11.3, 79.0], [11.4, 80.0], [11.5, 80.0], [11.6, 80.0], [11.7, 80.0], [11.8, 80.0], [11.9, 81.0], [12.0, 81.0], [12.1, 81.0], [12.2, 82.0], [12.3, 82.0], [12.4, 83.0], [12.5, 83.0], [12.6, 84.0], [12.7, 84.0], [12.8, 84.0], [12.9, 85.0], [13.0, 85.0], [13.1, 85.0], [13.2, 85.0], [13.3, 86.0], [13.4, 86.0], [13.5, 86.0], [13.6, 87.0], [13.7, 87.0], [13.8, 87.0], [13.9, 88.0], [14.0, 88.0], [14.1, 89.0], [14.2, 89.0], [14.3, 90.0], [14.4, 90.0], [14.5, 90.0], [14.6, 90.0], [14.7, 91.0], [14.8, 91.0], [14.9, 91.0], [15.0, 91.0], [15.1, 92.0], [15.2, 92.0], [15.3, 92.0], [15.4, 93.0], [15.5, 93.0], [15.6, 94.0], [15.7, 94.0], [15.8, 94.0], [15.9, 94.0], [16.0, 95.0], [16.1, 95.0], [16.2, 95.0], [16.3, 96.0], [16.4, 96.0], [16.5, 97.0], [16.6, 97.0], [16.7, 97.0], [16.8, 97.0], [16.9, 98.0], [17.0, 98.0], [17.1, 98.0], [17.2, 98.0], [17.3, 99.0], [17.4, 99.0], [17.5, 99.0], [17.6, 100.0], [17.7, 100.0], [17.8, 100.0], [17.9, 101.0], [18.0, 101.0], [18.1, 101.0], [18.2, 101.0], [18.3, 102.0], [18.4, 102.0], [18.5, 102.0], [18.6, 103.0], [18.7, 103.0], [18.8, 103.0], [18.9, 104.0], [19.0, 104.0], [19.1, 104.0], [19.2, 105.0], [19.3, 105.0], [19.4, 105.0], [19.5, 106.0], [19.6, 106.0], [19.7, 107.0], [19.8, 107.0], [19.9, 107.0], [20.0, 108.0], [20.1, 108.0], [20.2, 108.0], [20.3, 109.0], [20.4, 109.0], [20.5, 109.0], [20.6, 109.0], [20.7, 110.0], [20.8, 110.0], [20.9, 110.0], [21.0, 111.0], [21.1, 111.0], [21.2, 111.0], [21.3, 111.0], [21.4, 111.0], [21.5, 112.0], [21.6, 112.0], [21.7, 112.0], [21.8, 112.0], [21.9, 113.0], [22.0, 113.0], [22.1, 113.0], [22.2, 113.0], [22.3, 113.0], [22.4, 113.0], [22.5, 114.0], [22.6, 114.0], [22.7, 114.0], [22.8, 114.0], [22.9, 114.0], [23.0, 115.0], [23.1, 115.0], [23.2, 115.0], [23.3, 115.0], [23.4, 115.0], [23.5, 116.0], [23.6, 116.0], [23.7, 116.0], [23.8, 116.0], [23.9, 117.0], [24.0, 117.0], [24.1, 117.0], [24.2, 117.0], [24.3, 117.0], [24.4, 117.0], [24.5, 118.0], [24.6, 118.0], [24.7, 118.0], [24.8, 119.0], [24.9, 119.0], [25.0, 119.0], [25.1, 119.0], [25.2, 119.0], [25.3, 119.0], [25.4, 120.0], [25.5, 120.0], [25.6, 120.0], [25.7, 120.0], [25.8, 120.0], [25.9, 121.0], [26.0, 121.0], [26.1, 121.0], [26.2, 121.0], [26.3, 122.0], [26.4, 122.0], [26.5, 122.0], [26.6, 122.0], [26.7, 122.0], [26.8, 122.0], [26.9, 123.0], [27.0, 123.0], [27.1, 123.0], [27.2, 123.0], [27.3, 123.0], [27.4, 124.0], [27.5, 124.0], [27.6, 124.0], [27.7, 124.0], [27.8, 124.0], [27.9, 124.0], [28.0, 125.0], [28.1, 125.0], [28.2, 125.0], [28.3, 125.0], [28.4, 125.0], [28.5, 126.0], [28.6, 126.0], [28.7, 126.0], [28.8, 126.0], [28.9, 127.0], [29.0, 127.0], [29.1, 127.0], [29.2, 127.0], [29.3, 127.0], [29.4, 127.0], [29.5, 127.0], [29.6, 128.0], [29.7, 128.0], [29.8, 128.0], [29.9, 128.0], [30.0, 128.0], [30.1, 129.0], [30.2, 129.0], [30.3, 129.0], [30.4, 129.0], [30.5, 130.0], [30.6, 130.0], [30.7, 130.0], [30.8, 130.0], [30.9, 131.0], [31.0, 131.0], [31.1, 131.0], [31.2, 131.0], [31.3, 132.0], [31.4, 132.0], [31.5, 132.0], [31.6, 132.0], [31.7, 133.0], [31.8, 133.0], [31.9, 133.0], [32.0, 133.0], [32.1, 134.0], [32.2, 134.0], [32.3, 134.0], [32.4, 134.0], [32.5, 135.0], [32.6, 135.0], [32.7, 135.0], [32.8, 136.0], [32.9, 136.0], [33.0, 136.0], [33.1, 136.0], [33.2, 137.0], [33.3, 137.0], [33.4, 137.0], [33.5, 138.0], [33.6, 138.0], [33.7, 138.0], [33.8, 139.0], [33.9, 139.0], [34.0, 140.0], [34.1, 140.0], [34.2, 140.0], [34.3, 140.0], [34.4, 141.0], [34.5, 141.0], [34.6, 141.0], [34.7, 142.0], [34.8, 142.0], [34.9, 143.0], [35.0, 143.0], [35.1, 143.0], [35.2, 144.0], [35.3, 144.0], [35.4, 144.0], [35.5, 144.0], [35.6, 145.0], [35.7, 145.0], [35.8, 145.0], [35.9, 146.0], [36.0, 146.0], [36.1, 146.0], [36.2, 147.0], [36.3, 147.0], [36.4, 147.0], [36.5, 148.0], [36.6, 148.0], [36.7, 148.0], [36.8, 149.0], [36.9, 149.0], [37.0, 150.0], [37.1, 150.0], [37.2, 150.0], [37.3, 150.0], [37.4, 150.0], [37.5, 151.0], [37.6, 151.0], [37.7, 151.0], [37.8, 152.0], [37.9, 152.0], [38.0, 153.0], [38.1, 153.0], [38.2, 153.0], [38.3, 153.0], [38.4, 154.0], [38.5, 154.0], [38.6, 154.0], [38.7, 155.0], [38.8, 155.0], [38.9, 155.0], [39.0, 156.0], [39.1, 156.0], [39.2, 157.0], [39.3, 157.0], [39.4, 157.0], [39.5, 157.0], [39.6, 158.0], [39.7, 158.0], [39.8, 159.0], [39.9, 159.0], [40.0, 159.0], [40.1, 160.0], [40.2, 160.0], [40.3, 160.0], [40.4, 160.0], [40.5, 161.0], [40.6, 161.0], [40.7, 162.0], [40.8, 162.0], [40.9, 162.0], [41.0, 163.0], [41.1, 163.0], [41.2, 163.0], [41.3, 164.0], [41.4, 164.0], [41.5, 164.0], [41.6, 165.0], [41.7, 165.0], [41.8, 166.0], [41.9, 166.0], [42.0, 166.0], [42.1, 167.0], [42.2, 167.0], [42.3, 167.0], [42.4, 168.0], [42.5, 168.0], [42.6, 168.0], [42.7, 169.0], [42.8, 169.0], [42.9, 169.0], [43.0, 170.0], [43.1, 170.0], [43.2, 170.0], [43.3, 171.0], [43.4, 171.0], [43.5, 171.0], [43.6, 171.0], [43.7, 172.0], [43.8, 172.0], [43.9, 172.0], [44.0, 173.0], [44.1, 173.0], [44.2, 173.0], [44.3, 174.0], [44.4, 174.0], [44.5, 174.0], [44.6, 175.0], [44.7, 175.0], [44.8, 175.0], [44.9, 176.0], [45.0, 176.0], [45.1, 176.0], [45.2, 177.0], [45.3, 177.0], [45.4, 177.0], [45.5, 178.0], [45.6, 178.0], [45.7, 178.0], [45.8, 179.0], [45.9, 179.0], [46.0, 179.0], [46.1, 180.0], [46.2, 180.0], [46.3, 180.0], [46.4, 181.0], [46.5, 181.0], [46.6, 181.0], [46.7, 182.0], [46.8, 182.0], [46.9, 182.0], [47.0, 183.0], [47.1, 183.0], [47.2, 183.0], [47.3, 183.0], [47.4, 183.0], [47.5, 184.0], [47.6, 184.0], [47.7, 184.0], [47.8, 184.0], [47.9, 185.0], [48.0, 185.0], [48.1, 185.0], [48.2, 186.0], [48.3, 186.0], [48.4, 186.0], [48.5, 186.0], [48.6, 187.0], [48.7, 187.0], [48.8, 187.0], [48.9, 187.0], [49.0, 188.0], [49.1, 188.0], [49.2, 188.0], [49.3, 188.0], [49.4, 189.0], [49.5, 189.0], [49.6, 189.0], [49.7, 189.0], [49.8, 190.0], [49.9, 190.0], [50.0, 190.0], [50.1, 190.0], [50.2, 191.0], [50.3, 191.0], [50.4, 191.0], [50.5, 191.0], [50.6, 192.0], [50.7, 192.0], [50.8, 192.0], [50.9, 193.0], [51.0, 193.0], [51.1, 193.0], [51.2, 194.0], [51.3, 194.0], [51.4, 194.0], [51.5, 194.0], [51.6, 194.0], [51.7, 195.0], [51.8, 195.0], [51.9, 195.0], [52.0, 195.0], [52.1, 196.0], [52.2, 196.0], [52.3, 196.0], [52.4, 197.0], [52.5, 197.0], [52.6, 197.0], [52.7, 198.0], [52.8, 198.0], [52.9, 198.0], [53.0, 199.0], [53.1, 199.0], [53.2, 199.0], [53.3, 200.0], [53.4, 200.0], [53.5, 200.0], [53.6, 200.0], [53.7, 201.0], [53.8, 201.0], [53.9, 201.0], [54.0, 201.0], [54.1, 202.0], [54.2, 202.0], [54.3, 202.0], [54.4, 202.0], [54.5, 203.0], [54.6, 203.0], [54.7, 203.0], [54.8, 203.0], [54.9, 204.0], [55.0, 204.0], [55.1, 204.0], [55.2, 205.0], [55.3, 205.0], [55.4, 205.0], [55.5, 206.0], [55.6, 206.0], [55.7, 207.0], [55.8, 207.0], [55.9, 207.0], [56.0, 208.0], [56.1, 208.0], [56.2, 209.0], [56.3, 209.0], [56.4, 209.0], [56.5, 210.0], [56.6, 210.0], [56.7, 210.0], [56.8, 211.0], [56.9, 212.0], [57.0, 212.0], [57.1, 212.0], [57.2, 213.0], [57.3, 213.0], [57.4, 214.0], [57.5, 214.0], [57.6, 215.0], [57.7, 216.0], [57.8, 216.0], [57.9, 217.0], [58.0, 217.0], [58.1, 218.0], [58.2, 218.0], [58.3, 218.0], [58.4, 219.0], [58.5, 219.0], [58.6, 220.0], [58.7, 220.0], [58.8, 221.0], [58.9, 221.0], [59.0, 222.0], [59.1, 222.0], [59.2, 223.0], [59.3, 224.0], [59.4, 224.0], [59.5, 225.0], [59.6, 226.0], [59.7, 226.0], [59.8, 227.0], [59.9, 228.0], [60.0, 228.0], [60.1, 229.0], [60.2, 230.0], [60.3, 230.0], [60.4, 231.0], [60.5, 232.0], [60.6, 232.0], [60.7, 233.0], [60.8, 233.0], [60.9, 234.0], [61.0, 235.0], [61.1, 235.0], [61.2, 236.0], [61.3, 237.0], [61.4, 237.0], [61.5, 238.0], [61.6, 239.0], [61.7, 240.0], [61.8, 240.0], [61.9, 241.0], [62.0, 242.0], [62.1, 242.0], [62.2, 243.0], [62.3, 244.0], [62.4, 244.0], [62.5, 244.0], [62.6, 246.0], [62.7, 246.0], [62.8, 247.0], [62.9, 247.0], [63.0, 248.0], [63.1, 249.0], [63.2, 249.0], [63.3, 250.0], [63.4, 251.0], [63.5, 252.0], [63.6, 252.0], [63.7, 253.0], [63.8, 253.0], [63.9, 254.0], [64.0, 254.0], [64.1, 255.0], [64.2, 256.0], [64.3, 257.0], [64.4, 257.0], [64.5, 258.0], [64.6, 258.0], [64.7, 259.0], [64.8, 259.0], [64.9, 260.0], [65.0, 260.0], [65.1, 261.0], [65.2, 261.0], [65.3, 262.0], [65.4, 262.0], [65.5, 263.0], [65.6, 263.0], [65.7, 263.0], [65.8, 264.0], [65.9, 265.0], [66.0, 265.0], [66.1, 266.0], [66.2, 267.0], [66.3, 268.0], [66.4, 269.0], [66.5, 269.0], [66.6, 270.0], [66.7, 271.0], [66.8, 272.0], [66.9, 273.0], [67.0, 274.0], [67.1, 276.0], [67.2, 277.0], [67.3, 279.0], [67.4, 281.0], [67.5, 283.0], [67.6, 284.0], [67.7, 285.0], [67.8, 286.0], [67.9, 287.0], [68.0, 288.0], [68.1, 290.0], [68.2, 292.0], [68.3, 293.0], [68.4, 294.0], [68.5, 296.0], [68.6, 297.0], [68.7, 298.0], [68.8, 300.0], [68.9, 301.0], [69.0, 302.0], [69.1, 303.0], [69.2, 304.0], [69.3, 305.0], [69.4, 307.0], [69.5, 307.0], [69.6, 308.0], [69.7, 309.0], [69.8, 310.0], [69.9, 311.0], [70.0, 311.0], [70.1, 312.0], [70.2, 313.0], [70.3, 314.0], [70.4, 315.0], [70.5, 316.0], [70.6, 317.0], [70.7, 318.0], [70.8, 319.0], [70.9, 321.0], [71.0, 322.0], [71.1, 323.0], [71.2, 325.0], [71.3, 326.0], [71.4, 327.0], [71.5, 328.0], [71.6, 329.0], [71.7, 330.0], [71.8, 331.0], [71.9, 332.0], [72.0, 333.0], [72.1, 334.0], [72.2, 335.0], [72.3, 336.0], [72.4, 337.0], [72.5, 338.0], [72.6, 339.0], [72.7, 341.0], [72.8, 343.0], [72.9, 345.0], [73.0, 347.0], [73.1, 348.0], [73.2, 349.0], [73.3, 350.0], [73.4, 351.0], [73.5, 352.0], [73.6, 352.0], [73.7, 354.0], [73.8, 355.0], [73.9, 356.0], [74.0, 357.0], [74.1, 358.0], [74.2, 359.0], [74.3, 360.0], [74.4, 362.0], [74.5, 362.0], [74.6, 364.0], [74.7, 365.0], [74.8, 366.0], [74.9, 367.0], [75.0, 367.0], [75.1, 369.0], [75.2, 369.0], [75.3, 370.0], [75.4, 370.0], [75.5, 371.0], [75.6, 372.0], [75.7, 372.0], [75.8, 373.0], [75.9, 374.0], [76.0, 375.0], [76.1, 376.0], [76.2, 377.0], [76.3, 378.0], [76.4, 379.0], [76.5, 380.0], [76.6, 380.0], [76.7, 382.0], [76.8, 383.0], [76.9, 383.0], [77.0, 384.0], [77.1, 385.0], [77.2, 386.0], [77.3, 387.0], [77.4, 387.0], [77.5, 388.0], [77.6, 389.0], [77.7, 389.0], [77.8, 390.0], [77.9, 391.0], [78.0, 393.0], [78.1, 394.0], [78.2, 396.0], [78.3, 397.0], [78.4, 399.0], [78.5, 400.0], [78.6, 402.0], [78.7, 405.0], [78.8, 406.0], [78.9, 407.0], [79.0, 411.0], [79.1, 414.0], [79.2, 417.0], [79.3, 419.0], [79.4, 422.0], [79.5, 424.0], [79.6, 426.0], [79.7, 429.0], [79.8, 431.0], [79.9, 434.0], [80.0, 437.0], [80.1, 440.0], [80.2, 441.0], [80.3, 442.0], [80.4, 445.0], [80.5, 447.0], [80.6, 450.0], [80.7, 455.0], [80.8, 459.0], [80.9, 465.0], [81.0, 469.0], [81.1, 478.0], [81.2, 491.0], [81.3, 498.0], [81.4, 500.0], [81.5, 508.0], [81.6, 516.0], [81.7, 527.0], [81.8, 534.0], [81.9, 544.0], [82.0, 551.0], [82.1, 559.0], [82.2, 567.0], [82.3, 573.0], [82.4, 578.0], [82.5, 590.0], [82.6, 599.0], [82.7, 611.0], [82.8, 619.0], [82.9, 631.0], [83.0, 636.0], [83.1, 640.0], [83.2, 646.0], [83.3, 654.0], [83.4, 663.0], [83.5, 674.0], [83.6, 686.0], [83.7, 695.0], [83.8, 706.0], [83.9, 720.0], [84.0, 730.0], [84.1, 744.0], [84.2, 753.0], [84.3, 763.0], [84.4, 773.0], [84.5, 781.0], [84.6, 793.0], [84.7, 815.0], [84.8, 825.0], [84.9, 830.0], [85.0, 841.0], [85.1, 850.0], [85.2, 865.0], [85.3, 874.0], [85.4, 887.0], [85.5, 897.0], [85.6, 908.0], [85.7, 930.0], [85.8, 945.0], [85.9, 962.0], [86.0, 986.0], [86.1, 1004.0], [86.2, 1019.0], [86.3, 1034.0], [86.4, 1057.0], [86.5, 1072.0], [86.6, 1088.0], [86.7, 1111.0], [86.8, 1142.0], [86.9, 1157.0], [87.0, 1178.0], [87.1, 1190.0], [87.2, 1203.0], [87.3, 1220.0], [87.4, 1240.0], [87.5, 1272.0], [87.6, 1287.0], [87.7, 1303.0], [87.8, 1316.0], [87.9, 1334.0], [88.0, 1357.0], [88.1, 1379.0], [88.2, 1406.0], [88.3, 1421.0], [88.4, 1451.0], [88.5, 1469.0], [88.6, 1492.0], [88.7, 1511.0], [88.8, 1525.0], [88.9, 1555.0], [89.0, 1575.0], [89.1, 1597.0], [89.2, 1651.0], [89.3, 1684.0], [89.4, 1701.0], [89.5, 1724.0], [89.6, 1755.0], [89.7, 1786.0], [89.8, 1827.0], [89.9, 1856.0], [90.0, 1895.0], [90.1, 1948.0], [90.2, 1982.0], [90.3, 2064.0], [90.4, 2107.0], [90.5, 2133.0], [90.6, 2188.0], [90.7, 2233.0], [90.8, 2275.0], [90.9, 2308.0], [91.0, 2369.0], [91.1, 2413.0], [91.2, 2454.0], [91.3, 2478.0], [91.4, 2559.0], [91.5, 2623.0], [91.6, 2675.0], [91.7, 2740.0], [91.8, 2802.0], [91.9, 2898.0], [92.0, 2959.0], [92.1, 3014.0], [92.2, 3064.0], [92.3, 3126.0], [92.4, 3176.0], [92.5, 3300.0], [92.6, 3353.0], [92.7, 3429.0], [92.8, 3511.0], [92.9, 3581.0], [93.0, 3651.0], [93.1, 3738.0], [93.2, 3792.0], [93.3, 3874.0], [93.4, 3941.0], [93.5, 3978.0], [93.6, 4051.0], [93.7, 4140.0], [93.8, 4208.0], [93.9, 4382.0], [94.0, 4494.0], [94.1, 4592.0], [94.2, 4752.0], [94.3, 4916.0], [94.4, 5140.0], [94.5, 5326.0], [94.6, 5452.0], [94.7, 5611.0], [94.8, 5798.0], [94.9, 6079.0], [95.0, 6364.0], [95.1, 6708.0], [95.2, 7198.0], [95.3, 7487.0], [95.4, 7726.0], [95.5, 7984.0], [95.6, 8425.0], [95.7, 8731.0], [95.8, 9227.0], [95.9, 9674.0], [96.0, 10437.0], [96.1, 11845.0], [96.2, 12495.0], [96.3, 13316.0], [96.4, 13807.0], [96.5, 16030.0], [96.6, 17580.0], [96.7, 18844.0], [96.8, 20037.0], [96.9, 21081.0], [97.0, 22109.0], [97.1, 23334.0], [97.2, 24899.0], [97.3, 26842.0], [97.4, 28820.0], [97.5, 30225.0], [97.6, 32681.0], [97.7, 35093.0], [97.8, 38761.0], [97.9, 39471.0], [98.0, 42586.0], [98.1, 43604.0], [98.2, 44047.0], [98.3, 47561.0], [98.4, 49376.0], [98.5, 50538.0], [98.6, 51595.0], [98.7, 52621.0], [98.8, 55555.0], [98.9, 61692.0], [99.0, 63054.0], [99.1, 65142.0], [99.2, 67663.0], [99.3, 68970.0], [99.4, 71585.0], [99.5, 76124.0], [99.6, 85718.0], [99.7, 91126.0], [99.8, 99216.0], [99.9, 100155.0], [100.0, 102926.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3566.0, "series": [{"data": [[0.0, 1759.0], [68300.0, 1.0], [71500.0, 1.0], [73100.0, 1.0], [81100.0, 1.0], [85900.0, 1.0], [89100.0, 1.0], [90700.0, 1.0], [92300.0, 1.0], [100.0, 3566.0], [32900.0, 1.0], [33700.0, 4.0], [40900.0, 1.0], [42500.0, 1.0], [43300.0, 4.0], [44100.0, 2.0], [45700.0, 1.0], [49700.0, 2.0], [50500.0, 3.0], [52100.0, 1.0], [200.0, 1554.0], [51300.0, 1.0], [54500.0, 1.0], [53700.0, 1.0], [61700.0, 1.0], [63300.0, 1.0], [64900.0, 2.0], [69000.0, 1.0], [300.0, 965.0], [91400.0, 1.0], [400.0, 293.0], [102600.0, 1.0], [500.0, 124.0], [600.0, 113.0], [700.0, 87.0], [800.0, 91.0], [900.0, 53.0], [1000.0, 58.0], [1100.0, 55.0], [1200.0, 49.0], [1300.0, 52.0], [1400.0, 42.0], [1500.0, 50.0], [1600.0, 26.0], [1700.0, 36.0], [1800.0, 27.0], [1900.0, 25.0], [2000.0, 12.0], [2100.0, 26.0], [2200.0, 22.0], [2300.0, 21.0], [2400.0, 26.0], [2500.0, 15.0], [2600.0, 19.0], [2700.0, 12.0], [2800.0, 13.0], [2900.0, 15.0], [3000.0, 19.0], [3100.0, 17.0], [3300.0, 17.0], [3200.0, 7.0], [3400.0, 13.0], [3500.0, 11.0], [3700.0, 18.0], [3600.0, 15.0], [3800.0, 12.0], [3900.0, 15.0], [4000.0, 16.0], [66500.0, 1.0], [68100.0, 1.0], [4100.0, 10.0], [4300.0, 10.0], [4200.0, 7.0], [4600.0, 7.0], [4500.0, 10.0], [71300.0, 1.0], [72900.0, 1.0], [4400.0, 8.0], [76100.0, 1.0], [4800.0, 5.0], [4700.0, 4.0], [5100.0, 7.0], [4900.0, 5.0], [5000.0, 2.0], [5300.0, 6.0], [85700.0, 1.0], [5200.0, 7.0], [5600.0, 6.0], [5400.0, 7.0], [5500.0, 6.0], [92100.0, 1.0], [5700.0, 7.0], [5800.0, 5.0], [5900.0, 2.0], [96900.0, 1.0], [6000.0, 3.0], [6100.0, 4.0], [6300.0, 6.0], [100100.0, 1.0], [6200.0, 2.0], [6600.0, 3.0], [6500.0, 1.0], [6400.0, 2.0], [6700.0, 6.0], [6800.0, 1.0], [6900.0, 3.0], [7000.0, 1.0], [7100.0, 1.0], [7300.0, 4.0], [7400.0, 4.0], [7200.0, 2.0], [7500.0, 5.0], [7600.0, 3.0], [7700.0, 3.0], [7900.0, 4.0], [7800.0, 5.0], [8000.0, 2.0], [8100.0, 2.0], [8400.0, 3.0], [8600.0, 2.0], [8200.0, 4.0], [9000.0, 2.0], [9200.0, 6.0], [8800.0, 1.0], [9600.0, 3.0], [9400.0, 1.0], [10200.0, 5.0], [10400.0, 2.0], [10600.0, 1.0], [11000.0, 2.0], [11200.0, 1.0], [11800.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12600.0, 1.0], [12400.0, 2.0], [13200.0, 2.0], [12800.0, 1.0], [13400.0, 3.0], [13800.0, 2.0], [13600.0, 2.0], [14200.0, 1.0], [14000.0, 1.0], [14400.0, 1.0], [14600.0, 1.0], [15000.0, 1.0], [15600.0, 1.0], [15800.0, 2.0], [16000.0, 1.0], [18400.0, 2.0], [17600.0, 1.0], [18000.0, 1.0], [18800.0, 1.0], [20000.0, 2.0], [19600.0, 1.0], [20400.0, 1.0], [20800.0, 1.0], [21200.0, 1.0], [21600.0, 1.0], [22000.0, 1.0], [22400.0, 1.0], [24800.0, 1.0], [25600.0, 1.0], [26800.0, 2.0], [27200.0, 1.0], [28400.0, 2.0], [29200.0, 1.0], [28800.0, 2.0], [30000.0, 1.0], [30800.0, 2.0], [31600.0, 1.0], [37600.0, 2.0], [41600.0, 1.0], [43200.0, 2.0], [44000.0, 2.0], [44800.0, 2.0], [46400.0, 1.0], [45600.0, 1.0], [49600.0, 1.0], [52000.0, 3.0], [51200.0, 1.0], [60000.0, 1.0], [61600.0, 1.0], [62400.0, 1.0], [72000.0, 1.0], [84800.0, 1.0], [91200.0, 1.0], [92800.0, 1.0], [99200.0, 1.0], [73500.0, 1.0], [76700.0, 1.0], [84700.0, 1.0], [86300.0, 1.0], [91100.0, 2.0], [37900.0, 1.0], [38700.0, 2.0], [43500.0, 1.0], [47500.0, 1.0], [49100.0, 1.0], [50700.0, 1.0], [49900.0, 1.0], [53100.0, 2.0], [51500.0, 2.0], [52300.0, 1.0], [53900.0, 2.0], [54700.0, 1.0], [55500.0, 1.0], [60300.0, 1.0], [61900.0, 1.0], [65100.0, 2.0], [67800.0, 1.0], [71000.0, 1.0], [85400.0, 1.0], [101400.0, 1.0], [68500.0, 1.0], [73300.0, 2.0], [74900.0, 1.0], [90900.0, 1.0], [16500.0, 1.0], [17300.0, 2.0], [16900.0, 1.0], [17700.0, 1.0], [18900.0, 1.0], [20100.0, 2.0], [19700.0, 1.0], [20500.0, 1.0], [22500.0, 2.0], [22100.0, 2.0], [23300.0, 1.0], [22900.0, 1.0], [24900.0, 1.0], [26100.0, 1.0], [26500.0, 2.0], [29300.0, 1.0], [29700.0, 1.0], [31300.0, 3.0], [32100.0, 1.0], [33000.0, 1.0], [37800.0, 1.0], [38600.0, 1.0], [40200.0, 1.0], [39400.0, 1.0], [41800.0, 1.0], [43400.0, 1.0], [48200.0, 2.0], [49800.0, 1.0], [51400.0, 1.0], [53000.0, 1.0], [52200.0, 1.0], [58600.0, 1.0], [62600.0, 1.0], [61800.0, 1.0], [65000.0, 2.0], [67600.0, 3.0], [72400.0, 1.0], [78800.0, 1.0], [90000.0, 1.0], [102800.0, 1.0], [67500.0, 1.0], [69100.0, 1.0], [38900.0, 1.0], [42100.0, 2.0], [43700.0, 6.0], [48500.0, 1.0], [49300.0, 3.0], [50900.0, 1.0], [53300.0, 1.0], [58100.0, 1.0], [63700.0, 1.0], [65300.0, 1.0], [66600.0, 1.0], [69800.0, 1.0], [71400.0, 1.0], [76200.0, 1.0], [89000.0, 1.0], [100200.0, 2.0], [68900.0, 1.0], [100900.0, 1.0], [8500.0, 3.0], [8700.0, 3.0], [8300.0, 1.0], [9100.0, 3.0], [8900.0, 1.0], [9300.0, 1.0], [9500.0, 2.0], [9700.0, 1.0], [9900.0, 1.0], [10500.0, 1.0], [10300.0, 1.0], [11300.0, 2.0], [11500.0, 2.0], [11900.0, 3.0], [12300.0, 3.0], [12700.0, 1.0], [13300.0, 1.0], [13100.0, 3.0], [12900.0, 1.0], [13700.0, 2.0], [13500.0, 2.0], [16600.0, 2.0], [17000.0, 1.0], [17800.0, 1.0], [19000.0, 2.0], [19400.0, 1.0], [20200.0, 1.0], [19800.0, 1.0], [20600.0, 2.0], [21400.0, 1.0], [21000.0, 1.0], [22200.0, 1.0], [21800.0, 2.0], [23400.0, 3.0], [22600.0, 1.0], [23000.0, 1.0], [23800.0, 1.0], [24200.0, 1.0], [25800.0, 1.0], [27000.0, 1.0], [27400.0, 1.0], [29000.0, 1.0], [30200.0, 1.0], [29800.0, 1.0], [32600.0, 1.0], [34800.0, 1.0], [38800.0, 6.0], [42000.0, 1.0], [43600.0, 2.0], [45200.0, 1.0], [47600.0, 1.0], [49200.0, 1.0], [58800.0, 2.0], [61200.0, 1.0], [71200.0, 2.0], [85600.0, 1.0], [100000.0, 9.0], [101600.0, 1.0], [67900.0, 2.0], [66300.0, 1.0], [71100.0, 1.0], [91900.0, 1.0], [33500.0, 1.0], [38300.0, 3.0], [39900.0, 1.0], [50300.0, 2.0], [49500.0, 1.0], [51900.0, 1.0], [59900.0, 1.0], [63100.0, 1.0], [62300.0, 1.0], [63900.0, 1.0], [79800.0, 1.0], [66100.0, 1.0], [67700.0, 1.0], [86900.0, 1.0], [91700.0, 1.0], [102900.0, 1.0], [17100.0, 1.0], [17500.0, 2.0], [17900.0, 2.0], [18300.0, 1.0], [19900.0, 2.0], [21500.0, 1.0], [21900.0, 2.0], [23500.0, 2.0], [22700.0, 1.0], [24300.0, 1.0], [25100.0, 1.0], [24700.0, 1.0], [25500.0, 1.0], [26700.0, 1.0], [27100.0, 2.0], [28300.0, 1.0], [29100.0, 1.0], [29500.0, 1.0], [30700.0, 2.0], [33400.0, 1.0], [35000.0, 1.0], [36600.0, 1.0], [39000.0, 1.0], [42200.0, 1.0], [43800.0, 2.0], [44600.0, 1.0], [47800.0, 1.0], [50200.0, 1.0], [51000.0, 1.0], [52600.0, 2.0], [51800.0, 1.0], [57400.0, 1.0], [63000.0, 4.0], [65400.0, 1.0], [66800.0, 1.0], [68400.0, 1.0], [73200.0, 1.0], [89200.0, 1.0], [102000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 102900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8140.0, "series": [{"data": [[0.0, 8140.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 723.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1106.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 31.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 23.150046598322458, "minX": 1.74893334E12, "maxY": 100.0, "series": [{"data": [[1.74893346E12, 76.9541609822646], [1.74893364E12, 41.42566709021611], [1.74893334E12, 81.41935483870965], [1.74893352E12, 65.85107354956598], [1.7489337E12, 23.150046598322458], [1.7489334E12, 100.0], [1.74893358E12, 46.951219512195124]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7489337E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.5, "minX": 1.0, "maxY": 60728.00000000001, "series": [{"data": [[2.0, 105.33333333333333], [3.0, 81.66666666666667], [4.0, 76.0], [5.0, 82.0], [6.0, 74.80000000000001], [7.0, 73.16000000000001], [8.0, 36.5], [9.0, 81.20833333333331], [10.0, 72.37931034482759], [11.0, 81.26086956521736], [12.0, 3677.0], [13.0, 99.66666666666667], [14.0, 1376.9090909090912], [15.0, 488.22727272727263], [16.0, 100.05555555555554], [17.0, 116.64999999999998], [18.0, 1290.5405405405406], [19.0, 7877.375000000001], [20.0, 9922.26923076923], [21.0, 63.81818181818182], [22.0, 41.0], [23.0, 1098.4444444444443], [24.0, 508.7142857142857], [25.0, 74.4871794871795], [26.0, 1386.2333333333336], [27.0, 181.6935483870968], [28.0, 81.85714285714286], [29.0, 70.69230769230768], [30.0, 73.11111111111111], [31.0, 92.33333333333333], [33.0, 46.0], [32.0, 59.666666666666664], [35.0, 3234.333333333333], [34.0, 3819.086092715231], [37.0, 2881.666666666667], [36.0, 2557.9763779527552], [39.0, 2433.5], [38.0, 3723.9272727272723], [41.0, 1527.1712230215824], [40.0, 3332.881967213114], [43.0, 694.9277777777781], [42.0, 361.97991967871457], [45.0, 19723.365853658535], [44.0, 7034.481481481479], [47.0, 60728.00000000001], [46.0, 59843.8], [49.0, 68.59375000000001], [48.0, 65.91666666666669], [50.0, 566.7142857142858], [51.0, 81.0], [52.0, 239.16666666666666], [53.0, 87.0], [55.0, 101.46153846153845], [54.0, 90.14285714285714], [56.0, 1056.6999999999998], [57.0, 113.0], [59.0, 150.0], [58.0, 141.5454545454545], [60.0, 2618.75], [61.0, 396.409090909091], [63.0, 143.46875000000003], [62.0, 142.0], [66.0, 202.09523809523793], [67.0, 237.83687943262416], [65.0, 181.21115537848596], [64.0, 180.25], [70.0, 1024.1764705882354], [71.0, 1157.852941176471], [69.0, 46.800000000000004], [68.0, 2796.557020435063], [72.0, 423.6666666666667], [75.0, 81.2], [74.0, 103.0], [73.0, 90.23214285714283], [79.0, 124.45714285714281], [78.0, 81.5], [77.0, 96.66666666666667], [76.0, 60.0], [81.0, 2279.9999999999995], [83.0, 1998.2499999999998], [82.0, 178.44444444444446], [80.0, 213.59999999999994], [85.0, 461.5217391304349], [87.0, 362.24242424242425], [86.0, 115.61403508771926], [84.0, 99.41724941724942], [91.0, 155.14545454545458], [90.0, 136.09999999999997], [89.0, 132.25], [88.0, 119.56338028169019], [95.0, 164.0], [94.0, 163.98373983739847], [93.0, 147.54545454545453], [92.0, 135.25], [97.0, 365.99999999999994], [99.0, 4061.75], [98.0, 189.16666666666669], [96.0, 165.0], [100.0, 3018.140853302162], [1.0, 85.26315789473685]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[66.33780000000017, 2288.279099999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 56.833333333333336, "minX": 1.74893334E12, "maxY": 1.1605398083333334E7, "series": [{"data": [[1.74893346E12, 7430167.866666666], [1.74893364E12, 1.1605398083333334E7], [1.74893334E12, 553441.8166666667], [1.74893352E12, 4500768.033333333], [1.7489337E12, 6597593.383333334], [1.7489334E12, 4197302.15], [1.74893358E12, 607047.7333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74893346E12, 6719.166666666667], [1.74893364E12, 2885.6666666666665], [1.74893334E12, 56.833333333333336], [1.74893352E12, 4013.1666666666665], [1.7489337E12, 1967.1666666666667], [1.7489334E12, 2616.1666666666665], [1.74893358E12, 75.16666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7489337E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1302.126541799911, "minX": 1.74893334E12, "maxY": 67240.34146341463, "series": [{"data": [[1.74893346E12, 1869.96180081856], [1.74893364E12, 2527.0978398983452], [1.74893334E12, 8394.516129032258], [1.74893352E12, 1302.126541799911], [1.7489337E12, 1611.1901211556371], [1.7489334E12, 3122.272599859839], [1.74893358E12, 67240.34146341463]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7489337E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1037.6253494874195, "minX": 1.74893334E12, "maxY": 65381.51219512193, "series": [{"data": [[1.74893346E12, 1693.9705320600285], [1.74893364E12, 1522.2147395171562], [1.74893334E12, 6917.4838709677415], [1.74893352E12, 1204.90497944267], [1.7489337E12, 1037.6253494874195], [1.7489334E12, 2747.4695164681193], [1.74893358E12, 65381.51219512193]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7489337E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.8908177249885747, "minX": 1.74893334E12, "maxY": 517.3870967741934, "series": [{"data": [[1.74893346E12, 7.367803547066849], [1.74893364E12, 15.93583227445998], [1.74893334E12, 517.3870967741934], [1.74893352E12, 2.8908177249885747], [1.7489337E12, 8.778191985088553], [1.7489334E12, 5.693062368605459], [1.74893358E12, 3.0487804878048776]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7489337E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.74893334E12, "maxY": 102926.0, "series": [{"data": [[1.74893346E12, 101411.0], [1.74893364E12, 81185.0], [1.74893334E12, 14638.0], [1.74893352E12, 90074.0], [1.7489337E12, 28888.0], [1.7489334E12, 58831.0], [1.74893358E12, 102926.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74893346E12, 33.0], [1.74893364E12, 111.0], [1.74893334E12, 3431.0], [1.74893352E12, 41.0], [1.7489337E12, 32.0], [1.7489334E12, 38.0], [1.74893358E12, 11987.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74893346E12, 641.0], [1.74893364E12, 4202.5], [1.74893334E12, 13660.0], [1.74893352E12, 553.0], [1.7489337E12, 5382.000000000002], [1.7489334E12, 467.4000000000001], [1.74893358E12, 102356.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74893346E12, 71244.8], [1.74893364E12, 54333.25], [1.74893334E12, 14638.0], [1.74893352E12, 43317.0], [1.7489337E12, 19549.999999999996], [1.7489334E12, 52070.8], [1.74893358E12, 102926.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74893346E12, 181.0], [1.74893364E12, 367.0], [1.74893334E12, 7599.0], [1.74893352E12, 188.0], [1.7489337E12, 96.0], [1.7489334E12, 125.0], [1.74893358E12, 63033.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74893346E12, 1028.5999999999995], [1.74893364E12, 6814.25], [1.74893334E12, 14512.6], [1.74893352E12, 1056.199999999997], [1.7489337E12, 9285.4], [1.7489334E12, 30784.500000000004], [1.74893358E12, 102896.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7489337E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 44.5, "minX": 1.0, "maxY": 100243.0, "series": [{"data": [[2.0, 28430.0], [3.0, 11915.0], [4.0, 13360.0], [5.0, 8031.0], [6.0, 3919.0], [7.0, 2124.0], [8.0, 35939.0], [9.0, 2438.0], [10.0, 3532.5], [11.0, 1776.0], [12.0, 2964.0], [13.0, 2568.0], [14.0, 2180.0], [15.0, 1879.0], [16.0, 3627.0], [17.0, 2465.0], [18.0, 1458.0], [19.0, 1887.0], [20.0, 4000.5], [21.0, 2064.0], [22.0, 44.5], [23.0, 2133.0], [24.0, 80.0], [25.0, 1866.0], [26.0, 3098.5], [34.0, 151.0], [38.0, 59.5], [39.0, 75.0], [44.0, 19868.0], [48.0, 55.0], [51.0, 68.5], [53.0, 91.0], [52.0, 54.0], [55.0, 61.0], [54.0, 51.0], [59.0, 51.0], [66.0, 640.5], [67.0, 393.0], [70.0, 67.0], [71.0, 117.0], [75.0, 104.5], [72.0, 420.5], [79.0, 159.0], [86.0, 184.0], [87.0, 174.0], [84.0, 102.5], [88.0, 221.5], [97.0, 191.0], [96.0, 203.0], [98.0, 369.5], [101.0, 417.0], [107.0, 321.0], [110.0, 251.5], [112.0, 116.5], [115.0, 124.0], [123.0, 199.5], [121.0, 421.0], [122.0, 96.0], [125.0, 161.0], [124.0, 306.5], [131.0, 130.0], [134.0, 254.5], [129.0, 375.0], [130.0, 206.5], [128.0, 275.0], [132.0, 74.0], [137.0, 127.0], [138.0, 125.0], [140.0, 160.0], [143.0, 157.0], [136.0, 180.0], [139.0, 387.0], [141.0, 280.0], [142.0, 180.0], [148.0, 117.0], [150.0, 304.0], [144.0, 195.0], [145.0, 114.0], [151.0, 278.0], [147.0, 169.0], [146.0, 175.5], [1.0, 16797.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 25854.0], [2.0, 35093.0], [75.0, 31308.0], [18.0, 86329.0], [144.0, 100243.0], [79.0, 78068.5], [6.0, 100050.5], [48.0, 100068.0], [15.0, 38803.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 151.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 36.0, "minX": 1.0, "maxY": 100243.0, "series": [{"data": [[2.0, 27066.0], [3.0, 11535.0], [4.0, 10892.0], [5.0, 6409.0], [6.0, 481.5], [7.0, 775.0], [8.0, 33335.0], [9.0, 410.0], [10.0, 391.0], [11.0, 359.0], [12.0, 353.5], [13.0, 362.5], [14.0, 375.0], [15.0, 365.0], [16.0, 448.0], [17.0, 398.0], [18.0, 352.0], [19.0, 379.0], [20.0, 427.0], [21.0, 291.0], [22.0, 36.0], [23.0, 374.0], [24.0, 44.0], [25.0, 411.0], [26.0, 470.5], [34.0, 145.5], [38.0, 42.0], [39.0, 57.0], [44.0, 19762.5], [48.0, 45.0], [51.0, 48.5], [53.0, 53.0], [52.0, 44.5], [55.0, 45.0], [54.0, 44.5], [59.0, 38.0], [66.0, 317.0], [67.0, 358.0], [70.0, 53.0], [71.0, 87.0], [75.0, 87.5], [72.0, 388.5], [79.0, 132.0], [86.0, 157.0], [87.0, 139.0], [84.0, 66.5], [88.0, 191.0], [97.0, 177.0], [96.0, 163.0], [98.0, 351.5], [101.0, 384.0], [107.0, 312.0], [110.0, 234.0], [112.0, 103.5], [115.0, 107.0], [123.0, 163.0], [121.0, 303.0], [122.0, 77.0], [125.0, 135.0], [124.0, 262.5], [131.0, 112.0], [134.0, 222.5], [129.0, 350.0], [130.0, 188.0], [128.0, 263.0], [132.0, 65.5], [137.0, 118.0], [138.0, 112.0], [140.0, 134.0], [143.0, 137.0], [136.0, 146.5], [139.0, 354.0], [141.0, 253.0], [142.0, 159.0], [148.0, 107.0], [150.0, 244.0], [144.0, 168.5], [145.0, 86.0], [151.0, 248.0], [147.0, 151.0], [146.0, 158.0], [1.0, 14403.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 25854.0], [2.0, 35093.0], [75.0, 31308.0], [18.0, 86329.0], [144.0, 100243.0], [79.0, 78068.5], [6.0, 100050.5], [48.0, 100068.0], [15.0, 38803.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 151.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.74893334E12, "maxY": 60.55, "series": [{"data": [[1.74893346E12, 60.55], [1.74893364E12, 26.1], [1.74893334E12, 2.183333333333333], [1.74893352E12, 36.13333333333333], [1.7489337E12, 17.25], [1.7489334E12, 23.783333333333335], [1.74893358E12, 0.6666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7489337E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74893334E12, "maxY": 60.95, "series": [{"data": [[1.74893346E12, 60.95], [1.74893364E12, 26.233333333333334], [1.74893334E12, 0.5166666666666667], [1.74893352E12, 36.25], [1.7489337E12, 17.883333333333333], [1.7489334E12, 23.75], [1.74893358E12, 0.5666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.74893346E12, 0.05], [1.74893352E12, 0.23333333333333334], [1.7489334E12, 0.016666666666666666], [1.74893358E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.74893346E12, 0.08333333333333333], [1.74893358E12, 0.1]], "isOverall": false, "label": "524", "isController": false}, {"data": [[1.7489334E12, 0.016666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7489337E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.74893334E12, "maxY": 60.95, "series": [{"data": [[1.74893346E12, 60.95], [1.74893364E12, 26.233333333333334], [1.74893334E12, 0.5166666666666667], [1.74893352E12, 36.25], [1.7489337E12, 17.883333333333333], [1.7489334E12, 23.75], [1.74893358E12, 0.5666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.74893346E12, 0.13333333333333333], [1.74893352E12, 0.23333333333333334], [1.7489334E12, 0.03333333333333333], [1.74893358E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7489337E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.74893334E12, "maxY": 60.95, "series": [{"data": [[1.74893346E12, 60.95], [1.74893364E12, 26.233333333333334], [1.74893334E12, 0.5166666666666667], [1.74893352E12, 36.25], [1.7489337E12, 17.883333333333333], [1.7489334E12, 23.75], [1.74893358E12, 0.5666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74893346E12, 0.13333333333333333], [1.74893352E12, 0.23333333333333334], [1.7489334E12, 0.03333333333333333], [1.74893358E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7489337E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

